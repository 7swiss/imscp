=head1 NAME

 iMSCP::Server::cron::cron - i-MSCP Cron server implementation

=cut

# i-MSCP - internet Multi Server Control Panel
# Copyright (C) 2010-2018 by Laurent Declercq <l.declercq@nuxwin.com>
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.

package iMSCP::Server::cron::cron;

use strict;
use warnings;
use iMSCP::Boolean;
use iMSCP::Debug qw/ debug error getMessageByType /;
use iMSCP::File;
use iMSCP::Getopt;
use iMSCP::Provider::Config::iMSCP;
use iMSCP::Rights 'setRights';
use iMSCP::Service;
use iMSCP::TemplateParser 'replaceBlocByRef';
use parent 'iMSCP::Server::abstract';

=head1 DESCRIPTION

 i-MSCP Cron server implementation.

=head1 PUBLIC METHODS

=over 4

=item preinstall( )

 See iMSCP::Installer::AbstractActions::preinstall()

=cut

sub preinstall
{
    my ( $self ) = @_;

    iMSCP::Service->getInstance()->stop( 'cron' );
    0;
}

=item postinstall( )

 See iMSCP::Installer::AbstractActions::postinstall()

=cut

sub postinstall
{
    my ( $self ) = @_;

    my $srvMngr = iMSCP::Service->getInstance();
    $srvMngr->enable( $self->{'config'}->{'CRON_SNAME'} );

    $self->{'eventManager'}->registerOne(
        'beforeSetupRestartServices',
        sub {
            push @{ $_[0] },
                [
                    sub {
                        $srvMngr->start( $self->{'config'}->{'CRON_SNAME'} );
                        0;
                    },
                    'Cron'
                ];
            0;
        },
        -99
    );
}

=item addTask( \%data [, $filepath = "$self->{'config'}->{'CRON_D_DIR'}/imscp" ] )

 Add a new cron task

 Param hash \%data Cron task data:
  - TASKID  : Cron task unique identifier
  - MINUTE  : OPTIONAL Minute or shortcut such as @daily, @monthly... (Default: @daily)
  - HOUR    : OPTIONAL Hour - ignored if the MINUTE field defines a shortcut (Default: *)
  - DAY     : OPTIONAL Day of month - ignored if the MINUTE field defines a shortcut (Default: *)
  - MONTH   : OPTIONAL Month - ignored if the MINUTE field defines a shortcut - Default (Default: *)
  - DWEEK   : OPTIONAL Day of week - ignored if the MINUTE field defines a shortcut - (Default: *)
  - USER    : OPTIONAL Use under which the command must be run (default: root)
  - COMMAND : Command to run
  Param string $filepath OPTIONAL Cron file path (default: imscp cron file)
  Return int 0 on success, other on failure

=cut

sub addTask
{
    my ( $self, $data, $filepath ) = @_;

    $data = {} unless ref $data eq 'HASH';
    unless ( exists $data->{'COMMAND'} && exists $data->{'TASKID'} ) {
        error( 'Missing COMMAND or TASKID data' );
        return 1;
    }

    $filepath ||= "$self->{'config'}->{'CRON_D_DIR'}/imscp";

    $data->{'MINUTE'} //= '@daily';
    $data->{'HOUR'} //= '*';
    $data->{'DAY'} //= '*';
    $data->{'MONTH'} //= '*';
    $data->{'DWEEK'} //= '*';
    $data->{'USER'} //= $::imscpConfig{'ROOT_USER'};

    eval { $self->_validateCronTask( $data ); };
    if ( $@ ) {
        error( sprintf( 'Invalid cron tasks: %s', $@ ));
        return 1;
    }

    my $file = iMSCP::File->new( filename => $filepath );
    my $fileC = '';

    if ( -f $filepath ) {
        $fileC = $file->get();
        return 1 unless defined $fileC;

        # Remove entry with same ID if any
        replaceBlocByRef(
            qr/(:?^\n)?\Q# imscp [$data->{'TASKID'}] entry BEGIN.\E\n/m, qr/\Q# imscp [$data->{'TASKID'}] entry ENDING.\E\n/, '', \$fileC
        );
    } else {
        $fileC = <<'EOF';
# CRON(8) configuration file - auto-generated by i-MSCP
#     DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTEN

PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
EOF
    }

    my $rs = $self->{'eventManager'}->trigger( 'beforeCronAddTask', \$fileC, $data );
    return $rs if $rs;

    ( $fileC .= <<"EOF" ) =~ s/^(\@[^\s]+)\s+/$1 /gm;

# imscp [$data->{'TASKID'}] entry BEGIN.
$data->{'MINUTE'} $data->{'HOUR'} $data->{'DAY'} $data->{'MONTH'} $data->{'DWEEK'} $data->{'USER'} $data->{'COMMAND'}
# imscp [$data->{'TASKID'}] entry ENDING.
EOF

    $rs = $self->{'eventManager'}->trigger( 'afterCronAddTask', \$fileC, $data );
    return $rs if $rs;

    $file->set( $fileC );
    $file->save();
}

=item deleteTask( \%data [, $filepath = "$self->{'config'}->{'CRON_D_DIR'}/imscp" ] )

 Delete a cron task

 Param hash \%data Cron task data:
  - TASKID Cron task unique identifier
 Param string $filepath OPTIONAL Cron file path (default: imscp cron file)
 Return int 0 on success, other on failure

=cut

sub deleteTask
{
    my ( $self, $data, $filepath ) = @_;

    $data = {} unless ref $data eq 'HASH';
    unless ( exists $data->{'TASKID'} ) {
        error( 'Missing TASKID data' );
        return 1;
    }

    $filepath ||= "$self->{'config'}->{'CRON_D_DIR'}/imscp";
    return 0 unless -f $filepath;

    my $file = iMSCP::File->new( filename => $filepath );
    my $fileC = $file->getAsRef();
    return 1 unless defined $fileC;

    replaceBlocByRef( qr/(:?^\n)?\Q# imscp [$data->{'TASKID'}] entry BEGIN.\E\n/m, qr/\Q# imscp [$data->{'TASKID'}] entry ENDING.\E\n/, '', $fileC );

    $file->save();
}

=item setEnginePermissions( )

 Set engine permissions

 Return int 0 on success, other on failure

=cut

sub setEnginePermissions
{
    my ( $self ) = @_;

    return 0 unless -f "$self->{'config'}->{'CRON_D_DIR'}/imscp";

    setRights( "$self->{'config'}->{'CRON_D_DIR'}/imscp", {
        user  => $::imscpConfig{'ROOT_USER'},
        group => $::imscpConfig{'ROOT_GROUP'},
        mode  => '0640'
    } );
}

=back

=head1 PRIVATE METHODS

=over 4

=item _init( )

 Initialize instance

 Return iMSCP::Server::cron::cron

=cut

sub _init
{
    my ( $self ) = @_;

    $self->SUPER::_init();

    my $configProvider = iMSCP::Provider::Config::iMSCP->new(
        DISTRIBUTION_FILE => "$::imscpConfig{'SHARE_DIR'}/iMSCP/Server/cron/config/cron.data.dist",
        PRODUCTION_FILE   => "$::imscpConfig{'CONF_DIR'}/cron.data"
    );

    $self->{'config'} = $configProvider->( $configProvider );
    $self;
}

=item _validateCronTask( )

  Validate cron task fields

 Return void, die on invalid cron task

=cut

sub _validateCronTask
{
    my ( $self, $data ) = @_;

    if ( $data->{'MINUTE'} =~ /^\@(?:reboot|yearly|annually|monthly|weekly|daily|midnight|hourly)$/ ) {
        @{ $data }{qw/ HOUR DAY MONTH DWEEK /} = ( '', '', '', '' );
        return;
    }

    $self->_validateField( $_, $data->{ $_ } ) for qw/ MINUTE HOUR DAY MONTH DWEEK /;
}

=item _validateField( )

 Validate the given cron task field

 Param string $name Field name (uppercase)
 Param string $value Field value
 Return void, die if an attribute is not valid

=cut

sub _validateField
{
    my ( $self, $name, $value ) = @_;

    defined $name or die( '$name is undefined' );
    length $value or die( sprintf( "Value for the '%s' cron task field cannot be undefined nor empty", $name ));
    return if $value eq '*';

    my $step = '[1-9]?[0-9]';
    my $months = 'jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec';
    my $days = 'mon|tue|wed|thu|fri|sat|sun';
    my @namesArr = ();
    my $pattern;

    if ( $name eq 'MINUTE' ) {
        $pattern = qr/[ ]*(?:\b[0-5]?[0-9]\b)[ ]*/;
    } elsif ( $name eq 'HOUR' ) {
        $pattern = qr/[ ]*(?:\b[01]?[0-9]\b|\b2[0-3]\b)[ ]*/;
    } elsif ( $name eq 'DAY' ) {
        $pattern = qr/[ ]*(?:\b[01]?[1-9]\b|\b2[0-9]\b|\b3[01]\b)[ ]*/;
    } elsif ( $name eq 'MONTH' ) {
        @namesArr = split '|', $months;
        $pattern = qr/(?:[ ]*(?:\b[0-1]?[0-9]\b)[ ]*)|(?:[ ]*(?:$months)[ ]*)/;
    } elsif ( $name eq 'DWEEK' ) {
        @namesArr = split '|', $days;
        $pattern = qr/(?:[ ]*(?:\b[0]?[0-7]\b)[ ]*)|(?:[ ]*(?:$days)[ ]*)/;
    }

    defined $pattern or die( sprintf( "Unknown '%s' cron task field", $name ));

    my $range = "(?:(?:(?:$pattern)|(?:\\*\\/$step)?)|(?:(?:(?:$pattern)-(?:$pattern))(?:\\/$step)?))";
    my $longPattern = "$range(,$range)*";

    $value =~ /^$longPattern$/i or die( sprintf( "Invalid value '%s' given for the '%s' cron task field", $value, $name ));

    for my $testField ( split ',', $value ) {
        next if $testField !~ /^(?:(?:(?:$pattern)-(?:$pattern))(?:\/$step)?)+$/;

        my @compare = split '-', $testField;
        my @compareSlash = split '/', $compare['1'];

        $compare[1] = $compareSlash[0] if scalar @compareSlash == 2;

        my ( $left ) = grep { $namesArr[$_] eq lc( $compare[0] ) } 0 .. $#namesArr;
        my ( $right ) = grep { $namesArr[$_] eq lc( $compare[1] ) } 0 .. $#namesArr;

        $left = $compare[0] unless $left;
        $right = $compare[1] unless $right;

        if ( int( $left ) > int( $right ) ) {
            die( sprintf( "Invalid value '%s' given for the '%s' cron task field", $value, $name ));
        }
    }

    undef;
}

=back

=head1 AUTHOR

 Laurent Declercq <l.declercq@nuxwin.com>

=cut

1;
__END__
