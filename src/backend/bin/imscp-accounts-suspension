#!/usr/bin/perl

=head1 NAME

 imscp-accounts-suspension - Suspend expired client accounts

=head1 SYNOPSIS

 imscp-accounts-suspension [OPTION]...

=cut

# i-MSCP - internet Multi Server Control Panel
# Copyright (C) 2010-2018 by Laurent Declercq <l.declercq@nuxwin.com>
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.

use strict;
use warnings;
use File::Basename;
use FindBin;
use iMSCP::Boolean;
use iMSCP::Database;
use iMSCP::Debug qw/ error getMessageByType newDebug /;
use iMSCP::Bootstrapper;
use iMSCP::DbTasksProcessor;
use iMSCP::Getopt;
use iMSCP::LockFile;
use iMSCP::Mail;
use POSIX 'locale_h';

setlocale( LC_MESSAGES, 'C.UTF-8' );

$ENV{'LANG'} = 'C.UTF-8';

$> == 0 or die( "You do not have permission to call this script.\n" );

exit unless iMSCP::LockFile->new( path => "$::imscpConfig{'LOCK_DIR'}/imscp-accounts-suspension.lock", non_blocking => TRUE )->acquire();

iMSCP::Getopt->parse( sprintf( 'Usage: perl %s [OPTION]...', basename( $0 )) . qq{

Suspend expired client accounts

OPTIONS:
 -d,   --debug   Enable debug mode.
 -h,-? --help    Show this help.
 -v,   --verbose Enable verbose mode.
},
    'debug|d'   => \&iMSCP::Getopt::debug,
    'help|?|h'  => \&iMSCP::Getopt::showUsage,
    'verbose|v' => \&iMSCP::Getopt::verbose
);

newDebug( 'imscp-account-suspension.log' );

iMSCP::Bootstrapper->getInstance()->boot( {
    config_readonly => TRUE,
    nolock          => TRUE
} );

eval {
    my $rdbh = iMSCP::Database->factory()->getRawDb();
    $rdbh->{'RaiseError'} = TRUE;

    my $domainIDS = $rdbh->selectcol_arrayref(
        "
            SELECT domain_id FROM domain
            WHERE domain_expires <> 0
            AND domain_expires < UNIX_TIMESTAMP()
            AND domain_status NOT IN ('disabled', 'todelete')
        ",
        undef,
        'domain_id'
    );

    exit unless @{ $domainIDS };

    my $mailHardSuspension = !!( $rdbh->selectrow_hashref( "SELECT value FROM config WHERE name = 'HARD_MAIL_SUSPENSION'" )->{'value'} // FALSE );

    for my $domainID ( @{ $domainIDS } ) {
        eval {
            $rdbh->begin_work();

            if ( $mailHardSuspension ) {
                $rdbh->do( "UPDATE mail_users SET status = 'todisable', po_active = 'no' WHERE domain_id = ?", undef, $domainID );
            } else {
                $rdbh->do( "UPDATE mail_users SET po_active = 'no' WHERE domain_id = ?", undef, $domainID );
            }

            $rdbh->do( "UPDATE domain SET domain_status = 'todisable' WHERE domain_id = ?", undef, $domainID );
            $rdbh->do( "UPDATE subdomain SET subdomain_status = 'todisable' WHERE domain_id = ?", undef, $domainID );
            $rdbh->do( "UPDATE domain_aliasses SET alias_status = 'todisable' WHERE domain_id = ?", undef, $domainID );
            $rdbh->do(
                "
                    UPDATE subdomain_alias
                    SET subdomain_alias_status = 'todisable'
                    WHERE alias_id IN (SELECT alias_id FROM domain_aliasses WHERE domain_id = ?)
                ",
                undef,
                $domainID
            );
            $rdbh->commit();
        };
        if ( $@ ) {
            $rdbh->rollback();
            die;
        }
    }

    iMSCP::DbTasksProcessor->getInstance()->processDbTasks();
};
error( $@ ) if $@;

iMSCP::Mail
    ->new()
    ->errorMsg( scalar getMessageByType( 'error' ))
    ->warnMsg( scalar getMessageByType( 'warn' ));

=head1 AUTHOR

 Laurent Declercq <l.declercq@nuxwin.com>

=cut

1;
__END__
