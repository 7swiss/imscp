#!/usr/bin/perl

=head1 NAME

 iMSCP::Debug - Debug library

=cut

# i-MSCP - internet Multi Server Control Panel
# Copyright (C) 2010-2017 by Laurent Declercq <l.declercq@nuxwin.com>
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.

=head1 NAME

 imscp-autoinstall Install/Update/Reconfigure i-MSCP

=head1 SYNOPSIS

 imscp-autoinstall [options]...

=cut

use strict;
use warnings;
use FindBin;
use lib $FindBin::Bin, "$FindBin::Bin/engine/PerlLib", "$FindBin::Bin/engine/PerlVendor";
use File::Basename 'basename';
use iMSCP::Boolean;
use iMSCP::Debug qw/ debugRegisterCallBack newDebug output setDebug setVerbose /;
use iMSCP::Requirements;
use iMSCP::Dialog;
use iMSCP::Getopt;
use autoinstaller::Functions qw/ loadConfig build install /;

$ENV{'LANG'} = 'C.UTF-8';
$ENV{'PATH'} = '/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin';

# Needed to make any sub-process aware of i-MSCP setup process
$ENV{'IMSCP_SETUP'} = TRUE;

# Ensure that this script is run by root user
iMSCP::Requirements->new()->user();

newDebug( 'imscp-autoinstall.log' );

# Set backend mode
$::execmode = 'setup' unless defined $::execmode;

# Init variable that holds questions
%::questions = () unless %::questions;

# Initialize command line options
$::buildonly = FALSE;
$::forcereinstall = FALSE;
$::skippackages = FALSE;

# Parse autoinstaller options
iMSCP::Getopt->parse( sprintf( 'Usage: perl %s [OPTION]...', basename( $0 )) . qq{
 -b,    --build-only            Process build steps only.
 -f,    --force-reinstall       Force re-installation of distribution packages.
 -s,    --skip-dist-packages    Do not install distribution packages.},
    'build-only|b'           => \$::buildonly,
    'force-reinstall|f'      => \$::forcereinstall,
    '--skip-dist-packages|s' => \$::skippackages
);

# Set debug and verbose mode
setDebug( iMSCP::Getopt->debug );
setVerbose( iMSCP::Getopt->noprompt && iMSCP::Getopt->verbose );

# Getting reconfigure option value
$::reconfigure = iMSCP::Getopt->reconfigure;

# Handle preseed option
if ( iMSCP::Getopt->preseed ) {
    require iMSCP::Getopt->preseed;
    # The preseed option supersede the reconfigure option
    iMSCP::Getopt->reconfigure( 'none' );
    $::reconfigure = 'none';
    iMSCP::Getopt->noprompt( TRUE );
}

# Load config
loadConfig();

# Handle noprompt option
if ( iMSCP::Getopt->noprompt ) {
    debugRegisterCallBack( sub
    {
        if ( $? ) { # We exit with status 5 from iMSCP::Dialog in noninteractive mode
            if ( $? == 5 ) {
                if ( iMSCP::Getopt->preseed ) {
                    print STDERR output(
                        'Missing or bad entry found in your preseed file.',
                        'fatal'
                    );
                } else {
                    print STDERR output(
                        'Missing or bad entry found in configuration file.',
                        'fatal'
                    );
                }
            }
        } else {
            unless ( $::buildonly ) {
                print STDOUT output(
                    'i-MSCP has been successfully installed/updated.', 'ok'
                );
            } else {
                print STDOUT output(
                    'i-MSCP has been successfully built.', 'ok'
                );
            }
        }
    } );

    unless ( $::buildonly ) {
        print STDOUT output(
            'Installation in progress... Please wait.', 'info'
        );
    } else {
        print STDOUT output(
            'Build steps in progress... Please wait.', 'info'
        )
    }
} elsif ( !iMSCP::Getopt->preseed ) {
    system( 'clear' );
}

# Build steps
my $ret = build();

unless ( $ret ) {
    unless ( $::buildonly ) {
        $ret = install();
    } else {
        my $msg = <<"EOF";

\\Z4\\ZuBuild Steps Successful\\Zn

Please run the following commands from your console:

    # rm -fR $::imscpConfig{'ROOT_DIR'}/{daemon,engine,gui}
    # cp -fR $::{'INST_PREF'}/* /
    # rm -fR $::{'INST_PREF'}
    # perl $::imscpConfig{'ROOT_DIR'}/engine/setup/imscp-reconfigure -d
EOF
        $msg .= <<'EOF';

For any problem, have a look at https://i-mscp.net

Thank you for choosing i-MSCP.
EOF

        iMSCP::Dialog->getInstance()->msgbox( $msg );
    }
}

exit $ret;

=head1 AUTHOR

 Laurent Declercq <l.declercq@nuxwin.com>

=cut
