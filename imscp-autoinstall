#!/usr/bin/perl

# i-MSCP - internet Multi Server Control Panel
# Copyright (C) 2010 by internet Multi Server Control Panel
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
#
# @category		i-MSCP
# @copyright	2010 - 2011 by i-MSCP | http://i-mscp.net
# @author		Daniel Andreca <sci2tech@gmail.com>
# @version		SVN: $Id: imscp-setup 4677 2011-06-23 19:01:39Z sci2tech $
# @link			http://i-mscp.net i-MSCP Home Site
# @license		http://www.gnu.org/licenses/gpl-2.0.html GPL v2

use strict;
use warnings;

use FindBin;
use lib "$FindBin::Bin";
use lib "$FindBin::Bin/engine/PerlLib";
use lib "$FindBin::Bin/engine/PerlVendor";

use iMSCP::Debug;
use iMSCP::Dialog;
use iMSCP::SO;

iMSCP::Debug->newDebug('imscp-build.log');

require "$FindBin::Bin/library/autoinstall-methods.pl";

print output( "Detecting Debian variant", {mode=>'title'});
my $SO = iMSCP::SO->new();
my $rs = $SO->getSO();
exit $rs if $rs;
print output( "Detection ... ", {mode=>'ok'});

#test if script run as root
print output( "Check if runned as root", {mode=>'title'});
use iMSCP::Requirements;
iMSCP::Requirements->new()->user();

#if we are here all test passed so display a message
print output( "All tests... ", {mode=>'ok', text =>'PASS'});

#Display a marketing message
use iMSCP::File;
my $file = iMSCP::File->new(filename => $FindBin::Bin.'/README');
my $content = $file->get() or fatal("Can not find  $FindBin::Bin/README!");
iMSCP::Dialog->factory()->msgbox($content);

if(
	iMSCP::Dialog->factory()->yesno(
		"\nWe have detected $SO->{Distribution} $SO->{CodeName}. Is this ok?"
	)
){
	print output( "Fail detecting distribution ...", {mode=>'fatal'});
	exit 1;
}

#we have an OS / Distribution selected
my $autoinstallFile = "$FindBin::Bin/library/".lc($SO->{Distribution}).'_autoinstall.pm';
my $class = 'iMSCP::'.lc($SO->{Distribution}).'_autoinstall';
my $autoInstallClass;

if(-f $autoinstallFile){
	require $autoinstallFile ;
	$autoInstallClass = $class->new();
	$rs = $autoInstallClass->preBuild() if $autoInstallClass->can('preBuild');
	exit $rs if $rs;
}

iMSCP::Requirements->new()->test('all');

############Load OS / Distribution specific operation list
print output( "Loading $SO->{Distribution} specific variable", {mode => 'title'});
$rs = processConfFile("$FindBin::Bin/library/".lc($SO->{Distribution}).'-variable.xml');
exit $rs if $rs;
print output("", {mode=>'ok', text =>'DONE'});

print output( "Process disribution specific configurations", {mode => 'title'});
$rs = processSpecificConfFile();
exit $rs if $rs;
print output("", {mode=>'ok', text =>'DONE'});

print output("Daemon build", {mode => 'title'});
builddaemon();
print output('', {mode=>'ok', text =>'DONE'});

print output("Engine setup", {mode => 'title'});
engine();
print output('', {mode=>'ok', text =>'DONE'});

print output("GUI setup", {mode => 'title'});
#gui();
print output('', {mode=>'ok', text =>'DONE'});

print output("Maintainer scripts", {mode => 'title'});
maintainer();
print output('', {mode=>'ok', text =>'DONE'});

$autoInstallClass->postBuild() if( defined  $autoInstallClass && $autoInstallClass->can('postBuild'));

my @warnings	= getMessageByType('WARNING');
my @errors		= getMessageByType('ERROR');
my $msg;

if (@errors > 0 ) {
	$msg = "\nWARNINGS:\n".join("\n", @warnings)."\n" if @warnings > 0;
	$msg .= "\nERRORS:\n".join("\n", @errors)."\n" if @errors > 0;
	$msg .= "\nFix those errors and try again";
	iMSCP::Dialog->factory()->msgbox("\n\\Zb\\Z1 -> Finished but with errors:\\Zn\n".$msg);
	execute('clear');
	print $msg;
	exit 1;
} elsif(@warnings > 0) {
	$msg = "\nWARNINGS:\n".join("\n", @warnings)."\n";
	iMSCP::Dialog->factory()->set('defaultno', '');
	if (iMSCP::Dialog->factory()->yesno(
			"\n\\Z3 -> Finished but with warnings:\\Zn\n".
			$msg.
			"\nThis warnings are not fatal errors. Do you want to continue?"
	)){
		execute('clear');
		print $msg;
		exit 1;
	}
} else {
	iMSCP::Dialog->factory()->msgbox("\n\\Z2 -> Finished without errors");
}

iMSCP::Dialog->factory()->msgbox("\nNow we can start setup process\n ");

exit 0;

END{

	my $message = getMessage();
	iMSCP::Debug->newDebug('discard');
	#execute('clear');
	#if($main::imscpConfig{LOG_DIR} && -d $main::imscpConfig{LOG_DIR}){
		#open(F, '>:utf8', "$main::imscpConfig{'LOG_DIR'}/imscp-setup.log") or fatal("Error: Can't open file '$main::imscpConfig{'LOG_DIR'}/imscp-setup.log' for writing: $!");
		open(F, '>:utf8', "/imscp-setup.log") or fatal("Error: Can't open file '/imscp-setup.log' for writing: $!");
		print F $message;
		close F;
		#print STDOUT "A log file with details can be found at: $main::imscpConfig{'LOG_DIR'}/imscp-setup.log";
		#print STDOUT "A log file with details can be found at: /imscp-setup.log";
	#} else {
		#print STDOUT $message;
	#}
}
