#!/usr/bin/perl

=head1 NAME

 imscp-disable-accounts - Deactivates expired client accounts

=head1 SYNOPSIS

 imscp-disable-accounts [OPTION]...

=cut

# i-MSCP - internet Multi Server Control Panel
# Copyright (C) 2010-2017 by Laurent Declercq <l.declercq@nuxwin.com>
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.

use strict;
use warnings;
use File::Basename;
use FindBin;
use lib "$FindBin::Bin/../PerlLib", "$FindBin::Bin/../PerlVendor";
use iMSCP::Boolean;
use iMSCP::Database;
use iMSCP::Debug qw/ debug error newDebug setDebug setVerbose /;
use iMSCP::Bootstrapper;
use iMSCP::DbTasksProcessor;
use iMSCP::Getopt;
use POSIX 'locale_h';

@{ENV}{qw/ LANG PATH /} = (
    'C.UTF-8',
    '/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin',
);
delete $ENV{'LANGUAGE'};
setlocale( LC_MESSAGES, 'C.UTF-8' );

# Set execution context
$::execmode = 'backend';

sub run
{
    my $dbh = iMSCP::Database->factory()->getRawDb();

    local $@;
    eval {
        my $row = $dbh->selectrow_hashref(
            "SELECT value FROM config WHERE name = 'HARD_MAIL_SUSPENSION'"
        );
        $row = { value => 0 } unless $row;

        my $rows = $dbh->selectall_hashref(
            "
                SELECT domain_id, domain_admin_id
                FROM domain
                WHERE domain_expires <> '0'
                AND domain_expires < UNIX_TIMESTAMP()
                AND domain_status <> 'disabled'
            ",
            'domain_id'
        );

        return 0 unless %{ $rows };

        for ( keys %{ $rows } ) {
            eval {
                $dbh->begin_work();

                if ( $row->{'value'} ) { # SMTP/IMAP/POP disabled
                    $dbh->do(
                        'UPDATE mail_users SET status = ?, po_active = ? WHERE domain_id = ?',
                        undef, 'todisable', 'no', $_
                    );
                } else { # IMAP/POP disabled
                    $dbh->do(
                        'UPDATE mail_users SET po_active = ? WHERE domain_id = ?',
                        undef,
                        'no',
                        $_
                    );
                }

                $dbh->do(
                    'UPDATE domain SET domain_status = ? WHERE domain_id = ?',
                    undef,
                    'todisable',
                    $_
                );
                $dbh->do(
                    'UPDATE subdomain SET subdomain_status = ? WHERE domain_id = ?',
                    undef,
                    'todisable',
                    $_
                );
                $dbh->do(
                    'UPDATE domain_aliasses SET alias_status = ? WHERE domain_id = ?',
                    undef,
                    'todisable',
                    $_
                );
                $dbh->do(
                    '
                        UPDATE subdomain_alias
                        SET subdomain_alias_status = ?
                        WHERE alias_id IN (
                            SELECT alias_id FROM domain_aliasses WHERE domain_id = ?
                        )
                    ',
                    undef,
                    'todisable',
                    $_
                );
                $dbh->commit();
            };
            if ( $@ ) {
                $dbh->rollback();
                die;
            }
        }

        iMSCP::DbTasksProcessor->getInstance(
            mode => $::execmode
        )->processDbTasks();
    };
    if ( $@ ) {
        error( $@ );
        return 1;
    }

    0;
}

iMSCP::Getopt->parseNoDefault( sprintf( 'Usage: perl %s [OPTION]...', basename( $0 )) . qq{

Script that disable expired customer accounts

OPTIONS:
 -d,    --debug         Enable debug mode.
 -v,    --verbose       Enable verbose mode.},
    'debug|d'   => \&iMSCP::Getopt::debug,
    'verbose|v' => \&iMSCP::Getopt::verbose
);

newDebug( 'imscp-disable-accounts.log' );
setDebug( iMSCP::Getopt->debug );
setVerbose( iMSCP::Getopt->verbose );

exit unless iMSCP::Bootstrapper->getInstance()->lock(
    '/var/lock/imscp-disable-accounts.lock', 'nowait'
);

iMSCP::Bootstrapper->getInstance()->boot( {
    config_readonly => TRUE,
    mode            => $::execmode
} );

exit run();

=head1 AUTHOR

 Laurent Declercq <l.declercq@nuxwin.com>

=cut

1;
__END__
