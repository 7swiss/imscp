#!/usr/bin/perl

# i-MSCP - internet Multi Server Control Panel
# Copyright (C) 2010-2013 by internet Multi Server Control Panel
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
#
# @category    i-MSCP
# @copyright   2010-2013 by i-MSCP | http://i-mscp.net
# @author      Daniel Andreca <sci2tech@gmail.com>
# @author      Laurent Declercq <l.declercq@nuxwin.com>
# @link        http://i-mscp.net i-MSCP Home Site
# @license     http://www.gnu.org/licenses/gpl-2.0.html GPL v2

use strict;
use warnings;

use FindBin;
use lib "$FindBin::Bin/..", "$FindBin::Bin/../PerlLib";

use iMSCP::Debug;
use iMSCP::Boot;
use iMSCP::Net;
use iMSCP::Mail;
use iMSCP::Database;
use iMSCP::Execute;

# Turn off localisation features to force any command output to be in English
$ENV{'LC_MESSAGES'} = 'C';

# Do not clear screen at end of script
$ENV{'IMSCP_CLEAR_SCREEN'} = 0;

newDebug('imscp-net-interfaces-mngr.log');

silent(1);

our $proceed = $ARGV[0];

umask(027);

iMSCP::Boot->getInstance()->boot({ 'nolock' => 'yes', 'config_readonly' => 'yes' });

sub addAddresses
{
	my $rs = 0;

	my $rdata = iMSCP::Database->new()->factory()->doQuery('ip_id', 'SELECT ip_id, ip_number, ip_card FROM server_ips');
	unless (ref $rdata eq 'HASH') {
		error($rdata);
		iMSCP::Mail->new()->errmsg($rdata);
	} else {
		my $net = iMSCP::Net->getInstance();

		for(values %$rdata){
			if(! $net->isKnownAddr($_->{'ip_number'})) {
				if($net->isKnownDevice($_->{'ip_card'})) {
					$rs |= $net->addAddr($_->{'ip_number'}, $_->{'ip_card'});
					iMSCP::Mail->new()->errmsg(iMSCP::Debug::getLastError()) if $rs;
				} else {
					my $msg =
						"Network device $_->{'ip_card'} doesn't exist. Please fix this in " .
						"$main::imscpConfig{BASE_SERVER_VHOST_PREFIX}" .
						"$main::imscpConfig{BASE_SERVER_VHOST}/admin/ip_manage.php";
					error($msg);
					iMSCP::Mail->new()->errmsg($msg);
				}
			}
		}

		my @devices = $net->getDevices();

		for(@devices) {
			if(! $net->isDeviceUp($_)) {
				$rs |= $net->upDevice($_);
				iMSCP::Mail->new()->errmsg(iMSCP::Debug::getLastError()) if $rs;
			}
		}
	}

	$rs;
}

sub removeAddresses
{
	my $rs = 0;

	my $rdata = iMSCP::Database->new()->factory()->doQuery(
		'ip_id',
		"
			SELECT
				`ip_id`, `ip_number`, `ip_card`
			FROM
				`server_ips`
			WHERE
				`ip_number` != '$main::imscpConfig{'BASE_SERVER_IP'}'
		"
	);
	unless (ref $rdata eq 'HASH') {
		error($rdata);
		iMSCP::Mail->new()->errmsg($rdata);
	} else {
		my $net = iMSCP::Net->getInstance();

		for(values %{$rdata}) {
			$rs |= $net->delAddr($_->{'ip_number'});
			iMSCP::Mail->new()->errmsg(iMSCP::Debug::getLastError()) if $rs;
		}
	}

	$rs;
}

sub process
{
	my $rs = 0;

	if ($proceed && $proceed eq 'start') {
		$rs = addAddresses();
		return $rs if $rs;
	} elsif ($proceed && $proceed eq 'restart') {
		$rs = removeAddresses();
		return $rs if $rs;
		$rs = addAddresses();
		return $rs if $rs;
	} elsif ($proceed && $proceed eq 'stop') {
		$rs = removeAddresses();
		return $rs if $rs;
	} else {
		my $msg = "Must be called with 'start', 'restart' or 'stop' argument";
		error($msg);
		iMSCP::Mail->new()->errmsg($msg);
		exit 1;
	}

	my $database = iMSCP::Database->new('db' => $main::imscpConfig{'DATABASE_TYPE'})->factory();

	my $rdata = $database->doQuery('dummy', "DELETE FROM `server_ips` WHERE `ip_status` = 'todelete'");
	unless (ref $rdata eq 'HASH') {
		error($rdata);
		iMSCP::Mail->new()->errmsg($rdata);
	}

	$rdata = $database->doQuery('dummy', "UPDATE `server_ips` SET `ip_status` = 'ok'");
	unless (ref $rdata eq 'HASH') {
		error($rdata);
		iMSCP::Mail->new()->errmsg($rdata);
	}

	0;
}

exit process();
