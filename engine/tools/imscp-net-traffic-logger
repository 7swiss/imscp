#!/usr/bin/perl

=head1 NAME

 imscp-net-traffic-logger - start/stop i-MSCP traffic logger.

=head1 SYNOPSIS

 imscp-net-traffic-logger [options]... start|stop

=cut

# i-MSCP - internet Multi Server Control Panel
# Copyright (C) 2010-2018 Laurent Declercq <l.declercq@nuxwin.com>
#
# This library is free software; you can redistribute it and/or
# modify it under the terms of the GNU Lesser General Public
# License as published by the Free Software Foundation; either
# version 2.1 of the License, or (at your option) any later version.
#
# This library is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
# Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public
# License along with this library; if not, write to the Free Software
# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA

use strict;
use warnings;
use FindBin;
use lib "$FindBin::Bin/../PerlLib";
use File::Basename;
use iMSCP::Debug qw/ newDebug debug /;
use iMSCP::Bootstrapper;
use iMSCP::Execute qw/ execute /;
use iMSCP::Getopt;
use iMSCP::ProgramFinder;
use POSIX qw/ locale_h /;

setlocale( LC_MESSAGES, 'C.UTF-8' );

$ENV{'LANG'} = 'C.UTF-8';

my @EXECS;

sub start
{
    my $panelHttpPort = $::imscpConfig{'BASE_SERVER_VHOST_HTTP_PORT'} || undef;
    my $panelHttpsPort = $::imscpConfig{'BASE_SERVER_VHOST_HTTPS_PORT'} || undef;

    for my $exec ( @EXECS ) {
        defined $exec or next;

        # IMSCP_INPUT and IMSCP_OUTPUT chains for incoming/outgoing traffic logging
        for my $chain ( qw/ IMSCP_INPUT IMSCP_OUTPUT / ) {
            my $rs = execute( "$exec -t filter -N $chain", \my $stdout, \my $stderr );
            debug( $stdout ) if length $stdout;
            !$rs or die( $stderr || 'Unknown error' );
        }

        # Rules to pass incoming/outgoing traffic through our chains, excluding traffic from/to `lo' interface
        for my $rule ( '-I INPUT ! -i lo -j IMSCP_INPUT', '-I OUTPUT ! -o lo -j IMSCP_OUTPUT' ) {
            my $rs = execute( "$exec -t filter $rule", \my $stdout, \my $stderr );
            debug( $stdout ) if length $stdout;
            !$rs or die( $stderr || 'Unknown error' );
        }

        for my $port ( $panelHttpPort, $panelHttpsPort, 80, 443, 110, 143, 25, 465, 587, 995, 993, 20, 21 ) {
            defined or next;

            # Rule for logging incoming traffic to the given port
            my $rs = execute( "$exec -t filter -I IMSCP_INPUT -p tcp --dport $port", \my $stdout, \my $stderr );
            debug( $stdout ) if length $stdout;
            !$rs or die( $stderr || 'Unknown error' );

            # Rule for logging outgoing traffic from the given port
            $rs = execute( "$exec -t filter -I IMSCP_OUTPUT -p tcp --sport $port", \$stdout, \$stderr );
            debug( $stdout ) if length $stdout;
            !$rs or die( $stderr || 'Unknown error' );
        }

        for my $port( qw/ 25 465 587 / ) {
            # Rule for logging incoming traffic from the given port
            my $rs = execute( "$exec -t filter -I IMSCP_INPUT -p tcp --sport $port", \my $stdout, \my $stderr );
            debug( $stdout ) if length $stdout;
            !$rs or die( $stderr || 'Unknown error' );

            # Rule for logging outgoing traffic to the given port
            $rs = execute( "$exec -t filter -I IMSCP_OUTPUT -p tcp --dport $port", \$stdout, \$stderr );
            debug( $stdout ) if length $stdout;
            !$rs or die( $stderr || 'Unknown error' );
        }

        for my $chain ( qw/ IMSCP_INPUT IMSCP_OUTPUT / ) {
            my $rs = execute( "$exec -t filter -A $chain -j RETURN", \my $stdout, \my $stderr );
            debug( $stdout ) if length $stdout;
            !$rs or die( $stderr || 'Unknown error' );
        }
    }
}

sub stop
{
    for my $exec ( @EXECS ) {
        defined $exec or next;

        my $rs = execute( "$exec -S | grep 'IMSCP_'", \my $stdout, \my $stderr );
        debug( $stdout ) if length $stdout;
        $rs < 2 or die( $stderr || 'Unknown error' );
        length $stdout or next;

        my %data;
        while ( $stdout =~ /^-(A|N)\s+(((?:IMSCP_)?(?:INPUT|OUTPUT)).*)/gmi ) {
            if ( $1 eq 'A' && index( $3, 'IMSCP' ) != 0 ) {
                push @{ $data{'delete'} }, $2;
                next;
            }

            $data{'flush'}->{$3} ||= 1;
        };

        # Delete i-MSCP rules on INPUT and OUTPUT chains if any
        if ( $data{'delete'} ) {
            for my $rule ( @{ $data{'delete'} } ) {
                $rs = execute( "$exec -t filter -D $rule", \$stdout, \$stderr );
                debug( $stdout ) if length $stdout;
                !$rs or die( $stderr || 'Unknown error' );
            }
        }

        # Flush and delete i-MSCP chains if any
        %{ $data{'flush'} } or next;
        for my $chain ( keys %{ $data{'flush'} } ) {
            $rs = execute( "$exec -t filter -F $chain", \$stdout, \$stderr );
            debug( $stdout ) if length $stdout;
            !$rs or die( $stderr || 'Unknown error' );

            $rs = execute( "$exec -t filter -X $chain", \$stdout, \$stderr );
            debug( $stdout ) if length $stdout;
            !$rs or die( $stderr || 'Unknown error' );
        }
    }
}

newDebug( 'imscp-net-traffic-logger.log' );

iMSCP::Getopt->parseNoDefault( sprintf( 'Usage: perl %s [OPTION]... start|stop', basename( $0 )) . qq{

Script that start/stop i-MSCP traffic logger.

OPTIONS:
 -d,    --debug         Enable debug mode.
 -v,    --verbose       Enable verbose mode.},
    'debug|d'   => \&iMSCP::Getopt::debug,
    'verbose|v' => \&iMSCP::Getopt::verbose
);

my $action = shift;
$action && $action =~ /^(?:start|stop)$/ or iMSCP::Getopt->showUsage();

exit unless iMSCP::Bootstrapper->getInstance()->boot( {
    config_readonly => 1,
    nodatabase      => 1,
    nokeys          => 1,
    nolock          => 1
} )->lock( "$::imscpConfig{'LOCK_DIR'}/imscp-net-traffic-logger.lock", 'nowait' );

@EXECS = (
    iMSCP::ProgramFinder::find( 'iptables' ),
    ( $::imscpConfig{'IPV6_SUPPORT'} eq 'yes' ? iMSCP::ProgramFinder::find( 'ip6tables' ) : undef )
);

my %dispatch = (
    start => sub {
        stop();
        start();
    },
    stop  => \&stop
);

$dispatch{ $action }->();

=head1 AUTHOR

 Laurent Declercq <l.declercq@nuxwin.com>

=cut

1;
__END__
