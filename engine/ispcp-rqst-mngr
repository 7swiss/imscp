#!/usr/bin/perl

# ispCP ω (OMEGA) a Virtual Hosting Control Panel
# Copyright (C) 2001-2006 by moleSoftware GmbH - http://www.molesoftware.com
# Copyright (C) 2006-2010 by isp Control Panel - http://ispcp.net
#
# Version: $Id$
#
# The contents of this file are subject to the Mozilla Public License
# Version 1.1 (the "License"); you may not use this file except in
# compliance with the License. You may obtain a copy of the License at
# http://www.mozilla.org/MPL/
#
# Software distributed under the License is distributed on an "AS IS"
# basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
# License for the specific language governing rights and limitations
# under the License.
#
# The Original Code is "VHCS - Virtual Hosting Control System".
#
# The Initial Developer of the Original Code is moleSoftware GmbH.
# Portions created by Initial Developer are Copyright (C) 2001-2006
# by moleSoftware GmbH. All Rights Reserved.
# Portions created by the ispCP Team are Copyright (C) 2006-2010 by
# isp Control Panel. All Rights Reserved.
#
# The ispCP ω Home Page is:
#
#    http://isp-control.net
#

use FindBin;
use lib "$FindBin::Bin/";
require 'ispcp_common_code.pl';

use strict;
use warnings;

sub mngr_start_up {

	push_el(\@main::el, 'mngr_start_up()', 'Starting...');

	my $rs;

	$rs = lock_system();
	return $rs if ($rs != 0);

	# Let's clear Execution Logs, if any.
	if (-e $main::ispcp_rqst_mngr_el) {
		$rs = del_file($main::ispcp_rqst_mngr_el);
		return $rs if ($rs != 0);
	}

	push_el(\@main::el, 'mngr_start_up()', 'Ending...');

	 0;
}

sub mngr_shut_down {

	push_el(\@main::el, 'mngr_shut_down()', 'Starting...');
	push_el(\@main::el, 'mngr_shut_down()', 'Ending...');

	0;
}

sub mngr_engine {

	push_el(\@main::el, 'mngr_engine()', 'Starting...');

	my ($rs, $rdata, $sql);

	$sql = "
		SELECT
			`domain_id`, `domain_name`, `domain_status`
		FROM
			`domain`
		WHERE
			`domain_status` != 'ok'
		ORDER BY
			`domain_id`
		;
	";

	($rs, $rdata) = doSQL($sql);
	return $rs if ($rs != 0);

	my $dmn_count = @$rdata;

	if ($dmn_count > 0) {
		foreach (@$rdata) {
			my ($dmn_id, $dmn_name, $dmn_status) = (@$_[0], @$_[1], @$_[2]);

			if ($dmn_status eq 'toadd' || $dmn_status eq 'change' ||
				$dmn_status eq 'restore' || $dmn_status eq 'toenable' ||
				$dmn_status eq 'todisable' || $dmn_status eq 'dnschange' ) {

				if ($dmn_status eq 'restore') {
					$dmn_count--;
				}

				if (defined $main::engine_debug) {
					push_el(
						\@main::el, 'mngr_engine()',
						"processing $dmn_id, $dmn_name, $dmn_status."
					);
				}

				$rs = sys_command(
					"$main::ispcp_dmn_mngr $dmn_id " .
					"1>$main::ispcp_dmn_mngr_stdout " .
					"2>$main::ispcp_dmn_mngr_stderr"
				);

				if ($rs != 0) {
					if (-e $main::ispcp_dmn_mngr_el) {
						my $rs1;

						# removing 'sys_command()' error message;
						pop_el(\@main::el);

						($rs1, $rdata) = get_el_error($main::ispcp_dmn_mngr_el);
						return $rs1 if ($rs1 != 0);

						push_el(\@main::el, $main::ispcp_dmn_mngr, $rdata);
					}

					if (!defined $main::engine_debug) {
						del_file($main::ispcp_dmn_mngr_stdout);
						del_file($main::ispcp_dmn_mngr_stderr);
					}

					return $rs;
				}

				if (!defined $main::engine_debug) {
					del_file($main::ispcp_dmn_mngr_stdout);
					del_file($main::ispcp_dmn_mngr_stderr);
				}
			}
		}
	}

	$sql = "
		SELECT
			`mail_id`, `mail_acc`, `status`
		FROM
			`mail_users`
		WHERE
			`status` != 'ok'
		AND
			`status` != 'disabled'
		AND
			`status` != 'ordered'
		ORDER BY
			`mail_id`
		;
	";

	($rs, $rdata) = doSQL($sql);
	return $rs if ($rs != 0);

	my $mail_count = @$rdata;

	if ($mail_count > 0) {
		foreach (@$rdata) {
			my ($mail_id, $mail_acc, $mail_status) = (@$_[0], @$_[1], @$_[2]);

			if ($mail_status eq 'toadd' || $mail_status eq 'change' ||
				$mail_status eq 'delete') {
				if (defined($main::engine_debug)) {
					push_el(
						\@main::el, 'mngr_engine()',
						"processing $mail_id, $mail_acc, $mail_status."
					);
				}
			}

			$rs = sys_command(
				"$main::ispcp_mbox_mngr $mail_id 1> " .
				"$main::ispcp_mbox_mngr_stdout 2>$main::ispcp_mbox_mngr_stderr"
			);

			if ($rs != 0) {
				if (-e $main::ispcp_mbox_mngr_el) {
					my $rs1;

					# removing 'sys_command()' error message;
					pop_el(\@main::el);

					($rs1, $rdata) = get_el_error($main::ispcp_mbox_mngr_el);
					return $rs1 if ($rs1 != 0);

					push_el(\@main::el, $main::ispcp_mbox_mngr, $rdata);
				}

				if (!defined $main::engine_debug) {
					del_file($main::ispcp_mbox_mngr_stdout);
					del_file($main::ispcp_mbox_mngr_stderr);
				}

				return $rs;
			}

			if (!defined $main::engine_debug) {
				del_file($main::ispcp_mbox_mngr_stdout);
				del_file($main::ispcp_mbox_mngr_stderr);
			}
		}
	}

	$sql = "
		SELECT
			`subdomain_id`, `subdomain_name`, `subdomain_status`
		FROM
			`subdomain`
		WHERE
			`subdomain_status` != 'ok'
		ORDER BY
			`subdomain_id`
		;
	";

	($rs, $rdata) = doSQL($sql);
	return $rs if ($rs != 0);

	my $sub_count = @$rdata;

	if ($sub_count > 0) {
		foreach (@$rdata) {
			my ($sub_id, $sub_name, $sub_status) = (@$_[0], @$_[1], @$_[2]);

			if ($sub_status eq 'toadd' || $sub_status eq 'change' ||
				$sub_status eq 'delete') {

				push_el(
					\@main::el, 'mngr_engine()',
					"processing $sub_id, $sub_name, $sub_status."
				) if (defined $main::engine_debug);

				$rs = sys_command(
					"$main::ispcp_sub_mngr $sub_id " .
					"1>$main::ispcp_sub_mngr_stdout " .
					"2>$main::ispcp_sub_mngr_stderr"
				);

				if ($rs != 0) {
					if (-e $main::ispcp_sub_mngr_el) {
						my $rs1;

						# removing 'sys_command()' error message;
						pop_el(\@main::el);

						($rs1, $rdata) = get_el_error($main::ispcp_sub_mngr_el);
						return $rs1 if ($rs1 != 0);

						push_el(\@main::el, $main::ispcp_sub_mngr, $rdata);
					}

					if (!defined($main::engine_debug)) {
						del_file($main::ispcp_sub_mngr_stdout);
						del_file($main::ispcp_sub_mngr_stderr);
					}

					return $rs;
				}

				if (!defined($main::engine_debug)) {
					del_file($main::ispcp_sub_mngr_stdout);
					del_file($main::ispcp_sub_mngr_stderr);
				}
			}
		}
	}

	$sql = "
		SELECT
			`alias_id`, `alias_name`, `alias_status`
		FROM
			`domain_aliasses`
		WHERE
			`alias_status` IN ('toadd', 'change','dnschange')
		ORDER BY
			`alias_id`
		;
	";

	($rs, $rdata) = doSQL($sql);
	return $rs if ($rs != 0);

	my $als_count = @$rdata;

	if ($als_count > 0) {

		foreach (@$rdata) {
			my ($als_id, $als_name, $als_status) = (@$_[0], @$_[1], @$_[2]);

			push_el(
				\@main::el, 'mngr_engine()',
				"processing $als_id, $als_name, $als_status."
			) if (defined $main::engine_debug);

			$rs = sys_command(
				"$main::ispcp_als_mngr $als_id " .
				"1>$main::ispcp_als_mngr_stdout 2>$main::ispcp_als_mngr_stderr"
			);

			if ($rs != 0) {
				if (-e $main::ispcp_als_mngr_el) {
					my $rs1;

					# removing 'sys_command()' error message;
					pop_el(\@main::el);

					($rs1, $rdata) = get_el_error($main::ispcp_als_mngr_el);
					return $rs1 if ($rs1 != 0);

					push_el(\@main::el, $main::ispcp_als_mngr, $rdata);
				}

				if (!defined($main::engine_debug)) {
					del_file($main::ispcp_als_mngr_stdout);
					del_file($main::ispcp_als_mngr_stderr);
				}

				return $rs;
			}

			if (!defined($main::engine_debug)) {
				del_file($main::ispcp_als_mngr_stdout);
				del_file($main::ispcp_als_mngr_stderr);
			}
		}
	}

	$sql = "
		SELECT
			`subdomain_alias_id`, `subdomain_alias_name`, `subdomain_alias_status`
		FROM
			`subdomain_alias`
		WHERE
			`subdomain_alias_status` != 'ok'
		ORDER BY
			`subdomain_alias_id`
		;
	";

	($rs, $rdata) = doSQL($sql);
	return $rs if ($rs != 0);

	my $alssub_count = @$rdata;

	if ($alssub_count > 0) {
		foreach (@$rdata) {
			my ($sub_id, $sub_name, $sub_status) = (@$_[0], @$_[1], @$_[2]);

			if ($sub_status eq 'toadd' || $sub_status eq 'change' ||
				$sub_status eq 'delete' || $sub_status eq 'dnschange') {

				push_el(
					\@main::el, 'mngr_engine()',
					"processing $sub_id, $sub_name, $sub_status."
				) if (defined $main::engine_debug);

				$rs = sys_command(
					"$main::ispcp_alssub_mngr $sub_id " .
					"1>$main::ispcp_alssub_mngr_stdout " .
					"2>$main::ispcp_alssub_mngr_stderr"
				);

				if ($rs != 0) {
					if (-e $main::ispcp_alssub_mngr_el) {
						my $rs1;

						# removing 'sys_command()' error message;
						pop_el(\@main::el);

						($rs1, $rdata) = get_el_error($main::ispcp_alssub_mngr_el);
						return $rs1 if ($rs1 != 0);

						push_el(\@main::el, $main::ispcp_alssub_mngr, $rdata);
					}

					if (!defined($main::engine_debug)) {
						del_file($main::ispcp_alssub_mngr_stdout);
						del_file($main::ispcp_alssub_mngr_stderr);
					}

					return $rs;
				}

				if (!defined($main::engine_debug)) {
					del_file($main::ispcp_alssub_mngr_stdout);
					del_file($main::ispcp_alssub_mngr_stderr);
				}
			}
		}
	}

	$sql = "
		SELECT
			`alias_id`, `alias_name`, `alias_status`
		FROM
			`domain_aliasses`
		WHERE
			`alias_status` = 'delete'
		ORDER BY
			`alias_id`
		;
	";

	($rs, $rdata) = doSQL($sql);
	return $rs if ($rs != 0);

	$als_count += @$rdata;

	if ($als_count > 0) {
		foreach (@$rdata) {
			my ($als_id, $als_name, $als_status) = (@$_[0], @$_[1], @$_[2]);

			push_el(
				\@main::el, 'mngr_engine()',
				"processing $als_id, $als_name, $als_status."
			) if (defined $main::engine_debug);

			$rs = sys_command(
				"$main::ispcp_als_mngr $als_id " .
				"1>$main::ispcp_als_mngr_stdout " .
				"2>$main::ispcp_als_mngr_stderr"
			);

			if ($rs != 0) {
				if (-e $main::ispcp_als_mngr_el) {
					my $rs1;

					# removing 'sys_command()' error message;
					pop_el(\@main::el);

					($rs1, $rdata) = get_el_error($main::ispcp_als_mngr_el);
					return $rs1 if ($rs1 != 0);

					push_el(\@main::el, $main::ispcp_als_mngr, $rdata);

				}

				if (!defined($main::engine_debug)) {
					del_file($main::ispcp_als_mngr_stdout);
					del_file($main::ispcp_als_mngr_stderr);
				}

				return $rs;
			}

			if (!defined($main::engine_debug)) {
				del_file($main::ispcp_als_mngr_stdout);
				del_file($main::ispcp_als_mngr_stderr);
			}
		}
	}

	if ($dmn_count > 0 || $sub_count > 0 || $als_count > 0 || $mail_count > 0 ||
		$alssub_count > 0) {

		$rs = sys_command(
			"$main::ispcp_serv_mngr $dmn_count $sub_count $als_count " .
			"$mail_count $alssub_count 1>$main::ispcp_serv_mngr_stdout " .
			"2>$main::ispcp_serv_mngr_stderr"
		);

		if ($rs != 0) {
			if (-e $main::ispcp_serv_mngr_el) {
				my $rs1;

				# removing 'sys_command()' error message;
				pop_el(\@main::el);

				($rs1, $rdata) = get_el_error($main::ispcp_serv_mngr_el);
				return $rs1 if ($rs1 != 0);

				push_el(\@main::el, $main::ispcp_serv_mngr, $rdata);
			}

			if (!defined($main::engine_debug)) {
				del_file($main::ispcp_serv_mngr_stdout);
				del_file($main::ispcp_serv_mngr_stderr);
			}

			return $rs;
		}

		if (!defined($main::engine_debug)) {
			del_file($main::ispcp_serv_mngr_stdout);
			del_file($main::ispcp_serv_mngr_stderr);
		}
	}

	#
	# .htusers management BEGIN.
	#

	$sql = "
		SELECT
			`id`, `status`
		FROM
			`htaccess_users`
		WHERE
			`status` != 'ok'
		ORDER BY
			`id`
		;
	";

	($rs, $rdata) = doSQL($sql);
	return $rs if ($rs != 0);

	my $htusers_count = @$rdata;

	if ($htusers_count > 0) {
		foreach (@$rdata) {
			my ($htusers_id, $htusers_status) = (@$_[0], @$_[1]);

			if ($htusers_status eq 'toadd' || $htusers_status eq 'change' ||
				$htusers_status eq 'delete') {

				push_el(
					\@main::el, 'mngr_engine()',
					"processing $htusers_id, $htusers_status."
				) if (defined $main::engine_debug);

				$rs = sys_command(
					"$main::ispcp_htusers_mngr $htusers_id " .
					"1>$main::ispcp_htusers_mngr_stdout " .
					"2>$main::ispcp_htusers_mngr_stderr"
				);

				if ($rs != 0) {
					if (-e $main::ispcp_htusers_mngr_el) {
						my $rs1;

						# removing 'sys_command()' error message;
						pop_el(\@main::el);

						($rs1, $rdata) = get_el_error(
							$main::ispcp_htusers_mngr_el
						);
						return $rs1 if ($rs1 != 0);

						push_el(\@main::el, $main::ispcp_htusers_mngr, $rdata);

					}

					if (!defined $main::engine_debug) {
						del_file($main::ispcp_htusers_mngr_stdout);
						del_file($main::ispcp_htusers_mngr_stderr);
					}

					return $rs;
				}

				if (!defined $main::engine_debug) {
					del_file($main::ispcp_htusers_mngr_stdout);
					del_file($main::ispcp_htusers_mngr_stderr);
				}
			}
		}
	}

	#
	# .htusers management END.
	#

	#
	# .htgroups management BEGIN.
	#

	$sql = "
		SELECT
			`dmn_id`, `id`, `status`
		FROM
			`htaccess_groups`
		WHERE
			`status` IN ('toadd', 'change', 'delete')
		GROUP BY
			`dmn_id`
		ORDER BY
			`dmn_id`
		;
	";

	($rs, $rdata) = doSQL($sql);
	return $rs if ($rs != 0);

	my $htgroups_count = @$rdata;

	if ($htgroups_count > 0) {
		foreach (@$rdata) {
			my ($htdmn_id, $htgroups_id, $htgroups_status) = (
				@$_[0], @$_[1], @$_[2]
			);

			push_el(
				\@main::el, 'mngr_engine()',
				"processing $htdmn_id -> $htgroups_id, $htgroups_status."
			) if (defined $main::engine_debug);

			$rs = sys_command(
				"$main::ispcp_htgroups_mngr $htdmn_id " .
				"1>$main::ispcp_htgroups_mngr_stdout " .
				"2>$main::ispcp_htgroups_mngr_stderr"
			);

			if ($rs != 0) {
				if (-e $main::ispcp_htgroups_mngr_el) {
					my $rs1;

					# removing 'sys_command()' error message;
					pop_el(\@main::el);

					($rs1, $rdata) = get_el_error($main::ispcp_htgroups_mngr_el);
					return $rs1 if ($rs1 != 0);

					push_el(\@main::el, $main::ispcp_htgroups_mngr, $rdata);
				}

				if (!defined $main::engine_debug) {
					del_file($main::ispcp_htgroups_mngr_stdout);
					del_file($main::ispcp_htgroups_mngr_stderr);
				}

				return $rs;
			}

			if (!defined $main::engine_debug) {
				del_file($main::ispcp_htgroups_mngr_stdout);
				del_file($main::ispcp_htgroups_mngr_stderr);
			}
		}
	}

	#
	# .htgroups management END.
	#

	#
	# .htaccess management BEGIN.
	#

	$sql = "
		SELECT
			`id`, `status`
		FROM
			`htaccess`
		WHERE
			`status` != 'ok'
		ORDER BY
			`id`
		;
	";

	($rs, $rdata) = doSQL($sql);
	return $rs if ($rs != 0);

	my $htaccess_count = @$rdata;

	if ($htaccess_count > 0) {
		foreach (@$rdata) {
			my ($htaccess_id, $htaccess_status) = (@$_[0], @$_[1]);

			if ($htaccess_status eq 'toadd' || $htaccess_status eq 'change' ||
				$htaccess_status eq 'delete') {

				push_el(
					\@main::el, 'mngr_engine()',
					"processing $htaccess_id, $htaccess_status."
				) if (defined $main::engine_debug);

				$rs = sys_command(
					"$main::ispcp_htaccess_mngr $htaccess_id " .
					"1>$main::ispcp_htaccess_mngr_stdout " .
					"2>$main::ispcp_htaccess_mngr_stderr"
				);

				if ($rs != 0) {
					if (-e $main::ispcp_htaccess_mngr_el) {
						my $rs1;

						# removing 'sys_command()' error message;
						pop_el(\@main::el);

						($rs1, $rdata) = get_el_error(
							$main::ispcp_htaccess_mngr_el
						);
						return $rs1 if ($rs1 != 0);

						push_el(\@main::el, $main::ispcp_htaccess_mngr, $rdata);

					}

					if (!defined $main::engine_debug) {
						del_file($main::ispcp_htaccess_mngr_stdout);
						del_file($main::ispcp_htaccess_mngr_stderr);
					}

					return $rs;
				}

				if (!defined $main::engine_debug) {
					del_file($main::ispcp_htaccess_mngr_stdout);
					del_file($main::ispcp_htaccess_mngr_stderr);
				}
			}
		}
	}

	#
	# .htaccess management END.
	#

	#
	# Network card management BEGIN.
	#

	$sql = "
		SELECT
			`value`
		FROM
			`config`
		WHERE
			`name` = 'DATABASE_REVISION'
		;
	";

	($rs, $rdata) = doSQL($sql);
	return $rs if ($rs != 0);

	my $version = @$rdata[0];

	if (@$version[0] >= 33) {
		$sql = "
			SELECT
				`ip_id`
			FROM
				`server_ips`
			WHERE
				`ip_status` != 'ok'
			;
		";

		($rs, $rdata) = doSQL($sql);
		return $rs if ($rs != 0);

		my $ip_count = @$rdata;

		if ($ip_count > 0) {
			$rs = sys_command(
				"$main::ispcp_net_interfaces_mngr stop " .
				"1>$main::ispcp_net_interfaces_mngr_stdout 2>&1"
			);

			if (!defined $main::engine_debug) {
				del_file($main::ispcp_net_interfaces_mngr_stdout);
			}


			return $rs if($rs != 0);

			$rs = sys_command(
				"$main::ispcp_net_interfaces_mngr start " .
				"1>>$main::ispcp_net_interfaces_mngr_stdout 2>&1"
			);

			if (!defined $main::engine_debug) {
				del_file($main::ispcp_net_interfaces_mngr_stdout);
			}

			return $rs if($rs != 0);
		}
	}

	#
	# Network card management END.
	#

	#
	# Domains data deletion BEGIN
	#

	#
	# /!\  This task must be performed last because other managers need data
	# from the domain table to function properly. /!\
	#

	$sql = "
		SELECT
			`domain_id`, `domain_name`, `domain_status`
		FROM
			`domain`
		WHERE
			`domain_status` != 'ok'
		ORDER BY
			`domain_id`
		;
	";

	($rs, $rdata) = doSQL($sql);
	return $rs if ($rs != 0);

	$dmn_count = @$rdata;

	if ($dmn_count > 0) {
		foreach (@$rdata) {
			my ($dmn_id, $dmn_name, $dmn_status) = (@$_[0], @$_[1], @$_[2]);

			if ($dmn_status eq 'delete') {
				push_el(
					\@main::el, 'mngr_engine()',
					"processing $dmn_id, $dmn_name, $dmn_status."
				) if (defined $main::engine_debug);

				$rs = sys_command(
					"$main::ispcp_dmn_mngr $dmn_id " .
					"1>$main::ispcp_dmn_mngr_stdout " .
					"2>$main::ispcp_dmn_mngr_stderr"
				);

				if ($rs != 0) {
					if (-e $main::ispcp_dmn_mngr_el) {
						my $rs1;

						# removing 'sys_command()' error message;
						pop_el(\@main::el);

						($rs1, $rdata) = get_el_error($main::ispcp_dmn_mngr_el);
						return $rs1 if ($rs1 != 0);

						push_el(\@main::el, $main::ispcp_dmn_mngr, $rdata);
					}

					if (!defined $main::engine_debug) {
						del_file($main::ispcp_dmn_mngr_stdout);
						del_file($main::ispcp_dmn_mngr_stderr);
					}

					return $rs;
				}

				if (!defined $main::engine_debug) {
					del_file($main::ispcp_dmn_mngr_stdout);
					del_file($main::ispcp_dmn_mngr_stderr);
				}
			}
		}
	}

	#
	# Domains data deletion END
	#

	push_el(\@main::el, 'mngr_engine()', 'Ending...');

	0;
}

my $rs;

$rs = mngr_start_up();

if ($rs != 0) {

	dump_el(\@main::el, $main::ispcp_rqst_mngr_el);

	mngr_shut_down();

	exit 1;
}

$rs = mngr_engine();

if ($rs != 0) {

	dump_el(\@main::el, $main::ispcp_rqst_mngr_el);

	mngr_shut_down();

	exit 1;
}

$rs = mngr_shut_down();

if ($rs != 0) {

	dump_el(\@main::el, $main::ispcp_rqst_mngr_el);

	exit 1;
}

exit 0;
