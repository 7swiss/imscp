#!/usr/bin/perl

# ispCP ω (OMEGA) a Virtual Hosting Control Panel
# Copyright (C) 2001-2006 by moleSoftware GmbH - http://www.molesoftware.com
# Copyright (C) 2006-2010 by isp Control Panel - http://ispcp.net
#
# Version: $Id$
#
# The contents of this file are subject to the Mozilla Public License
# Version 1.1 (the "License"); you may not use this file except in
# compliance with the License. You may obtain a copy of the License at
# http://www.mozilla.org/MPL/
#
# Software distributed under the License is distributed on an "AS IS"
# basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
# License for the specific language governing rights and limitations
# under the License.
#
# The Original Code is "VHCS - Virtual Hosting Control System".
#
# The Initial Developer of the Original Code is moleSoftware GmbH.
# Portions created by Initial Developer are Copyright (C) 2001-2006
# by moleSoftware GmbH. All Rights Reserved.
# Portions created by the ispCP Team are Copyright (C) 2006-2010 by
# isp Control Panel. All Rights Reserved.
#
# The ispCP ω Home Page is:
#
#    http://isp-control.net
#

################################################################################
## Program Short Desciption:                                                  ##
##  Subdomain Manager - Manage all data related to one subdomain              ##
################################################################################

use FindBin;
use lib "$FindBin::Bin/";

require 'ispcp_common_code.pl';

use strict;
use warnings;

# Hide the "used only once: possible typo" warnings
no warnings 'once';

################################################################################
##                               SUBROUTINES                                  ##
################################################################################

################################################################################
##
## Perform startup tasks
##
sub sub_mngr_start_up {

	push_el(\@main::el, 'sub_mngr_start_up()', 'Starting...');

	# Get task id (subdomain id) to be processed
	if (defined $ARGV[0] && $ARGV[0] ne '') {
		$main::sub_task_id = $ARGV[0];
	} else {
		push_el(\@main::el, 'sub_mngr_start_up()', '[ERROR] Undefined ARGV...');

		return -1;
	}

	# Check for master process
	my $rs = check_master();
	return $rs if ($rs != 0);

	# Clear execution logs, if any
	if (-e $main::ispcp_sub_mngr_el) {
		$rs = del_file($main::ispcp_sub_mngr_el);
		return $rs if ($rs != 0);
	}

	push_el(\@main::el, 'sub_mngr_start_up()', 'Ending...');

	0;
}

################################################################################
##
## Perform shutdown tasks
##
sub sub_mngr_shut_down {

	push_el(\@main::el, 'sub_mngr_shut_down()', 'Starting...');
	push_el(\@main::el, 'sub_mngr_shut_down()', 'Ending...');

	0;
}

################################################################################
##                     Subdomain DNS records managment                         #
################################################################################

################################################################################
##
## Add subdomain DNS records
##
## @param hashref $data subdomain entries
## @return int 0 on success
##
sub sub_add_named_db_data {

	push_el(\@main::el, 'sub_add_named_db_data()', 'Starting...');

	my ($data) = @_;

	if (!defined $data || $data eq '') {
		push_el(
			\@main::el, 'sub_add_named_db_data()',
			'[ERROR]: Undefined Input Data...'
		);

		return -1;
	}

	my $subStatus = @$data{'subdomain_status'};
	my $dmnName = @$data{'domain_name'};
	my $cfgDir = $main::cfg{'CONF_DIR'};
	my $wrkFile = "$cfgDir/bind/working/$dmnName.db";
	my $sysFile = "$main::cfg{'BIND_DB_DIR'}/$dmnName.db";
	my $bkpFile = "$cfgDir/bind/backup/$dmnName.db." . time;

	# Get needed templates
	my ($rs, $dbSubEntryB, $dbSubEntry, $dbSubEntryE) = get_tpl(
		"$cfgDir/bind/parts", 'db_sub_entry_b.tpl', 'db_sub_entry.tpl',
		'db_sub_entry_e.tpl'
	);
	return $rs if ($rs != 0);

	# Prepare needed templates
	($rs, my $dbSubEntryBv, $dbSubEntry, my $dbSubEntryEv) = prep_tpl(
		{
			'{SUB_NAME}' => "@$data{subdomain_name}.$dmnName",
			'{DMN_IP}' => @$data{'ip_number'},
			'{DMN_NAME}' => $dmnName
		},
		$dbSubEntryB, $dbSubEntry, $dbSubEntryE
	);
	return $rs if ($rs != 0);

	# Get current domain db working file content
	($rs, my $wrkFileContent) = get_file($wrkFile);
	return $rs if ($rs != 0);

	if($subStatus eq 'change') {
		# Replace subdomain DNS records
		($rs, $wrkFileContent) = repl_tag(
			$dbSubEntryBv, $dbSubEntryEv, $wrkFileContent,
			"$dbSubEntryBv$dbSubEntry$dbSubEntryEv", 'sub_add_named_db_data()'
		);
		return $rs if($rs != 0 && $rs != -5);
	}

	# Adds subdomain DNS records
	# Acts also as recovery process on `change` if DNS records were not found
	if($subStatus eq 'toadd' || $rs == -5) {
		push_el(
			\@main::el, 'sub_add_named_db_data()',
			'[WARNING] DNS records entries was not found in db file! ' .
			'New entries will be added now!'
		) if($rs == -5);

		($rs, $wrkFileContent) = add_tag(
			$dbSubEntryB, $dbSubEntryE, $wrkFileContent,
			"$dbSubEntryBv$dbSubEntry$dbSubEntryEv\n"
		);

		return $rs if($rs != 0);
	}

	# Update serial number according RFC 1912
	$rs = getSerialNumber(\$dmnName, \$wrkFileContent, \$wrkFileContent);
	return $rs if ($rs != 0);

	# Backup current production file before replace it
	if(-e $sysFile) {
		$rs = sys_command_rs("$main::cfg{'CMD_CP'} -pf $sysFile $bkpFile");
		return $rs if ($rs != 0);
	}

	# Store and install new production file
	for ($wrkFile, $sysFile) {
		$rs = store_file(
			$_, $wrkFileContent, $main::cfg{'ROOT_USER'},
			$main::cfg{'ROOT_GROUP'}, 0644
		);
		return $rs if ($rs != 0);
	}

	push_el(\@main::el, 'sub_add_named_db_data()', 'Ending...');

	0;
}

################################################################################
##
## Delete subdomain DNS records
##
## @param hashref $data subdomain entries
## @return int 0 on success
##
sub sub_del_named_db_data {

	push_el(\@main::el, 'sub_del_named_db_data()', 'Starting...');

	my ($data) = @_;

	if (!defined $data || $data eq '') {
		push_el(
			\@main::el, 'sub_del_named_db_data()',
			'[ERROR] Undefined Input Data...'
		);

		return -1;
	}

	my $dmnName = @$data{'domain_name'};
	my $cfgDir = $main::cfg{'CONF_DIR'};
	my $wrkFile = "$cfgDir/bind/working/$dmnName.db";
	my $sysFile = "$main::cfg{'BIND_DB_DIR'}/$dmnName.db";
	my $bkpFile = "$cfgDir/bind/backup/$dmnName.db." . time;

	# Get needed templates
	my ($rs, $dbSubEntryB, $dbSubEntryE) = get_tpl(
		"$cfgDir/bind/parts", 'db_sub_entry_b.tpl', 'db_sub_entry_e.tpl'
	);
	return $rs if ($rs != 0);

	# Prepare needed templates
	($rs, $dbSubEntryB, $dbSubEntryE) = prep_tpl(
		{'{SUB_NAME}' => "@$data{subdomain_name}.$dmnName"}, $dbSubEntryB,
		$dbSubEntryE
	);
	return $rs if ($rs != 0);

	# Get current domain db working file content
	($rs, my $wrkFileContent) = get_file($wrkFile);
	return $rs if ($rs != 0);

	# Delete subdomain DNS records if it exist
	($rs, $wrkFileContent) = del_tag(
		$dbSubEntryB, "$dbSubEntryE\n", $wrkFileContent
	);
	return $rs if ($rs != 0 && $rs != -5);

	# Update serial number according RFC 1912
	$rs = getSerialNumber(\$dmnName, \$wrkFileContent, \$wrkFileContent);
	return $rs if ($rs != 0);

	# Backup current production file before replace it
	if(-e $sysFile) {
		$rs = sys_command_rs("$main::cfg{'CMD_CP'} -pf $sysFile $bkpFile");
		return $rs if ($rs != 0);
	}

	# Store and install production file
	for ($wrkFile, $sysFile) {
		$rs = store_file(
			$_, $wrkFileContent, $main::cfg{'ROOT_USER'},
			$main::cfg{'ROOT_GROUP'}, 0644
		);
		return $rs if ($rs != 0);
	}

	push_el(\@main::el, 'sub_del_named_db_data()', 'Ending...');

	0;
}

################################################################################
##                      Subdomain Httpd data managment                         #
################################################################################

################################################################################
##
## Generate subdomain httpd group entry
##
## @param hashref $data subdomain entries
## @return int 0 on success
##
sub gen_httpd_sub_group_entry {

	push_el(\@main::el, 'gen_httpd_sub_group_entry()', 'Starting...');

	my ($data) = @_;

	if (!defined $data || $data eq '') {
		push_el(
			\@main::el, 'gen_httpd_sub_group_entry()',
			'[ERROR] Undefined Input Data...'
		);

		return (-1, '');
	}

	my $dmnName = @$data{'domain_name'};
	my $subName = "@$data{subdomain_name}.$dmnName";
	my $subMountPoint = @$data{'subdomain_mount'};
	my $cfgDir = $main::cfg{'CONF_DIR'};
	my ($suexecUid, $suexecGid) = get_dmn_suexec_user(@$data{'domain_id'});
	my $suexecUserPref = $main::cfg{'APACHE_SUEXEC_USER_PREF'};
	my ($suexecUser, $suexecGroup) = (
		"$suexecUserPref$suexecUid", "$suexecUserPref$suexecGid"
	);

	# Get needed templates
	my (
		$rs, $subB, $subEntry, $subE, $subCgiB, $subCgiEntry, $subCgiE, $subPhpB,
		$subPhpEntry, $subPhpE, $subPhp2B, $subPhp2Entry, $subPhp2E, $subCustom
	) = get_tpl (
		"$cfgDir/apache/parts", 'sub_b.tpl', 'sub_entry.tpl', 'sub_e.tpl',
		'sub_cgi_b.tpl', 'sub_cgi_entry.tpl', 'sub_cgi_e.tpl', 'sub_php_b.tpl',
		'sub_php_entry.tpl', 'sub_php_e.tpl', 'sub_php2_b.tpl',
		'sub_php2_entry.tpl', 'sub_php2_e.tpl', 'custom.conf.tpl'
	);
	return ($rs, '') if ($rs != 0);

	(
		$rs, $subB, $subEntry, $subE, $subCgiEntry, $subPhp2Entry, $subCustom
	) = prep_tpl(
		{
			'{DMN_NAME}' => $dmnName,
			'{DMN_GRP}' => $dmnName,
			'{STARTER_DIR}' => $main::cfg{'PHP_STARTER_DIR'},
			'{PHP_VERSION}' => $main::cfg{'PHP_VERSION'},
			'{BASE_SERVER_VHOST}' => $main::cfg{'BASE_SERVER_VHOST'},
			'{BASE_SERVER_VHOST_PREFIX}' =>
				$main::cfg{'BASE_SERVER_VHOST_PREFIX'},
			'{WWW_DIR}' => $main::cfg{'APACHE_WWW_DIR'},
			'{APACHE_LOG_DIR}' => $main::cfg{'APACHE_LOG_DIR'},
			'{MODS_DIR}' => $main::cfg{'APACHE_MODS_DIR'},
			'{SUB_NAME}' => $subName,
			'{SELF}' => $subName,
			'{SUB_IP}' => @$data{'ip_number'},
			'{SUB_NAME_PHP2}' => "$dmnName$subMountPoint",
			'{MOUNT_POINT}' => $subMountPoint,
			'{GUI_ROOT_DIR}' => $main::cfg{'GUI_ROOT_DIR'},
			'{PEAR_DIR}' => $main::cfg{'PEAR_DIR'},
			'{APACHE_USERS_LOG_DIR}' => $main::cfg{'APACHE_USERS_LOG_DIR'},
			'{CUSTOM_SITES_CONFIG_DIR}' =>
				$main::cfg{'APACHE_CUSTOM_SITES_CONFIG_DIR'},
			'{SUEXEC_USER}' => $suexecUser,
			'{SUEXEC_GROUP}' => $suexecGroup
		},
		$subB, $subEntry, $subE, $subCgiEntry, $subPhp2Entry, $subCustom
	);
	return ($rs, '') if ($rs != 0);

	# CGI support ?
	my $cgiEntry = (@$data{'domain_cgi'} eq 'yes')
		? "$subCgiB$subCgiEntry$subCgiE" : "$subCgiB$subCgiE";

	($rs, $subEntry) = repl_tag(
		$subCgiB, $subCgiE, $subEntry, $cgiEntry, 'gen_httpd_sub_group_entry()'
	);
	return ($rs, '') if ($rs != 0);

	# PHP support ?
	my $phpEntry;

	if (@$data{'domain_php'} eq 'no') {
		$phpEntry = "$subPhpB$subPhpEntry$subPhpE";
	} else {
		$phpEntry = "$subPhpB$subPhpE";
		my $php2Entry = "$subPhp2B$subPhp2Entry$subPhp2E";

		($rs, $subEntry) = repl_tag(
			$subPhp2B, $subPhp2E, $subEntry, $php2Entry,
			'gen_httpd_sub_group_entry()'
		);
		return ($rs, '') if ($rs != 0);
	}

	($rs, $subEntry) = repl_tag(
		$subPhpB, $subPhpE, $subEntry, $phpEntry, 'gen_httpd_sub_group_entry()'
	);
	return ($rs, '') if ($rs != 0);

	# Custom domain config file
	if (!-e "$main::cfg{'APACHE_CUSTOM_SITES_CONFIG_DIR'}/$subName.conf" ) {
		$rs = store_file(
			"$main::cfg{'APACHE_CUSTOM_SITES_CONFIG_DIR'}/$subName.conf",
			$subCustom, $main::cfg{'ROOT_USER'}, $main::cfg{'ROOT_GROUP'}, 0644
		);
		return $rs if ($rs != 0);
	}

	push_el(\@main::el, 'gen_httpd_sub_group_entry()', 'Ending...');

	return (0, "$subB$subEntry$subE");
}

################################################################################
##
## Add subdomain httpd configuration data
##
## @param hashref $data subdomain entries
## @return int 0 on success
##
sub sub_add_httpd_cfg_data {

	push_el(\@main::el, 'sub_add_httpd_cfg_data()', 'Starting...');

	my ($data) = @_;

	if (!defined $data || $data eq '') {
		push_el(
			\@main::el, 'sub_add_httpd_cfg_data()',
			'[ERROR] Undefined Input Data...'
		);

		return -1;
	}

	my $dmnName = @$data{'domain_name'};
	my $cfgDir = $main::cfg{'CONF_DIR'};
	my $sysFile = "$main::cfg{'APACHE_SITES_DIR'}/ispcp.conf";
	my $wrkFile = "$cfgDir/apache/working/ispcp.conf";
	my $bkpFile = "$cfgDir/apache/backup/httpd.conf." . time;

	# Get needed templates
	my ($rs, $cfgB, $cfgE, $vhB, $vhE, $dgB,$dgE, $subB, $subE) = get_tpl (
		"$cfgDir/apache/parts", 'cfg_b.tpl', 'cfg_e.tpl', 'vh_b.tpl',
		'vh_e.tpl', 'dg_b.tpl', 'dg_e.tpl', 'sub_b.tpl', 'sub_e.tpl'
	);
	return $rs if ($rs != 0);

	# Prepare templates
	my ($vhBv, $vhEntryV, $vhEv, $dgBv, $dgEv, $subBv,$subEv);
	($rs, $vhBv, $vhEv, $dgBv, $dgEv, $subBv, $subEv) = prep_tpl(
		{
			'{IP}' => @$data{'ip_number'},
			'{DMN_GRP}' => $dmnName,
			'{SUB_NAME}' => "@$data{subdomain_name}.$dmnName"
		},
		$vhB, $vhE, $dgB, $dgE, $subB, $subE
	);
	return $rs if ($rs != 0);

	# Get current production file
	($rs, my $sysFileContent) = get_file($sysFile);
	return $rs if ($rs != 0);

	# Get current working file
	($rs, my $wrkFileContent) = get_file($wrkFile);
	return $rs if ($rs != 0);

	# Are $cfg_b, $cfg_e tags exist in the working confing ?

	($rs, my $rData) = get_tag($cfgB, $cfgE, $wrkFileContent);
	return $rs if ($rs != 0);

	# Is our Virtual Host exist in the working config ?

	($rs, $rData) = get_tag($vhBv, $vhEv, $wrkFileContent);
	return $rs if ($rs != 0);

	my $vhEntryWorking = $rData;

	($rs, $rData) = get_tag($dgBv, $dgEv, $vhEntryWorking);
	return $rs if ($rs != 0);

	my $dgEntryWorking = $rData;

	($rs, $rData) = get_tag($subBv, $subEv, $dgEntryWorking);

	if ($rs == 0) {
		($rs, $dgEntryWorking) = del_tag($subBv, "$subEv\n", $dgEntryWorking);
		return $rs if ($rs != 0);
	}

	($rs, $rData) = get_tag($subB, $subE, $dgEntryWorking);
	return $rs if ($rs != 0);

	($rs, my $subEntry) = gen_httpd_sub_group_entry($data);
	return $rs if ($rs != 0);

	($rs, $dgEntryWorking) = repl_tag(
		$subB, $subE, $dgEntryWorking, "$subEntry\n$subB$subE"
	);
	return $rs if ($rs != 0);

	# Fit all back to top

	($rs, $vhEntryWorking) = repl_tag(
		$dgBv, $dgEv, $vhEntryWorking, $dgEntryWorking,
		'sub_add_httpd_cfg_data()'
	);
	return $rs if ($rs != 0);

	($rs, $wrkFileContent) = repl_tag(
		$vhBv, $vhEv, $wrkFileContent, $vhEntryWorking,
		'sub_add_httpd_cfg_data()'
	);
	return $rs if ($rs != 0);

	($rs, $rData) = get_tag($cfgB, $cfgE, $sysFileContent);

	if ($rs == 0) {
		($rs, $sysFileContent) = repl_tag(
			$cfgB, $cfgE, $sysFileContent, $wrkFileContent,
			'sub_add_httpd_cfg_data()'
		);
		return $rs if ($rs != 0);
	} elsif ($rs == -1) {
		$sysFileContent .= $wrkFileContent;
	} else {
		return $rs;
	}

	# Backup current production file before replace it
	$rs= sys_command_rs("$main::cfg{'CMD_CP'} -p $sysFile $bkpFile");
	return $rs if ($rs != 0);

	# Store and install new production file
	for ($wrkFile, $sysFile) {
		$rs = store_file(
			$_, $wrkFileContent, $main::cfg{'ROOT_USER'},
			$main::cfg{'ROOT_GROUP'}, 0644
		);
		return $rs if ($rs != 0);
	}

	push_el(\@main::el, 'sub_add_httpd_cfg_data()', 'Ending...');

	0;
}

################################################################################
##
## Change subdomain httpd configuration data
##
## @param hashref $data subdomain entries
## @return int 0 on success
##
sub sub_change_httpd_cfg_data {

	push_el(\@main::el, 'sub_change_httpd_cfg_data()', 'Starting...');

	my ($data) = @_;

	if (!defined $data || $data eq '') {
		push_el(
			\@main::el, 'sub_change_httpd_cfg_data()',
			'[ERROR] Undefined Input Data...'
		);

		return -1;
	}

	my $rs = sub_add_httpd_cfg_data($data);
	return $rs if ($rs != 0);

	push_el(\@main::el, 'sub_change_httpd_cfg_data()', 'Ending...');

	0;
}

################################################################################
##
## Delete subdomain httpd configuration data
##
## @param hashref $data subdomain entries
## @return int 0 on success
##
sub sub_del_httpd_cfg_data {

	push_el(\@main::el, 'sub_del_httpd_cfg_data()', 'Starting...');

	my ($data) = @_;

	if (!defined $data || $data eq '') {
		push_el(
			\@main::el, 'sub_del_httpd_cfg_data()',
			'[ERROR] Undefined Input Data...'
		);

		return -1;
	}

	my $subName = "@$data{subdomain_name}.@$data{domain_name}";
	my $cfgDir = $main::cfg{'CONF_DIR'};
	my $sysFile = "$main::cfg{'APACHE_SITES_DIR'}/ispcp.conf";
	my $wrkFile = "$cfgDir/apache/working/ispcp.conf";
	my $bkpFile = "$cfgDir/apache/backup/httpd.conf." . time;

	# Get needed templates
	my ($rs, $SubEntryB, $SubEntryE) = get_tpl(
		"$cfgDir/apache/parts", 'sub_b.tpl', 'sub_e.tpl'
	);
	return $rs if ($rs != 0);

	# Prepare needed templates
	($rs, $SubEntryB, $SubEntryE) = prep_tpl(
		{'{SUB_NAME}' => $subName}, $SubEntryB, $SubEntryE
	);
	return $rs if ($rs != 0);

	# Get current apache working file content
	($rs, my $wrkFileContent) = get_file($wrkFile);
	return $rs if ($rs != 0);

	# Delete subdomain vhost if it exist
	($rs, $wrkFileContent) = del_tag(
		$SubEntryB, "$SubEntryE\n", $wrkFileContent
	);
	return $rs if ($rs != 0 && $rs != -5);

	# Backup current production file before replace it
	if(-e $sysFile) {
		$rs = sys_command_rs("$main::cfg{'CMD_CP'} -pf $sysFile $bkpFile");
		return $rs if ($rs != 0);
	}

	# Store and install production file
	for ($wrkFile, $sysFile) {
		$rs = store_file(
			$_, $wrkFileContent, $main::cfg{'ROOT_USER'},
			$main::cfg{'ROOT_GROUP'}, 0644
		);
		return $rs if ($rs != 0);
	}

	push_el(\@main::el, 'sub_del_httpd_cfg_data()', 'Ending...');

	0;
}

################################################################################
##
## Add subdomain httpd file data
##
## @param hashref $data subdomain entries
## @return int 0 on success
##
sub sub_add_httpd_file_data {

	push_el(\@main::el, 'sub_add_httpd_file_data()', 'Starting...');

	my ($data) = @_;

	if (!defined $data || $data eq '') {
		push_el(
			\@main::el, 'sub_add_httpd_file_data()',
			'[ERROR] Undefined Input Data...'
		);

		return -1;
	}

	my $dmnName = @$data{'domain_name'};
	my $subName = "@$data{subdomain_name}.$dmnName";
	my $subDir = "$main::cfg{'APACHE_WWW_DIR'}/$dmnName/@$data{subdomain_mount}";
	my ($sysUid, $sysGid) = get_dmn_suexec_user(@$data{'domain_id'});
	my $sysUser = "$main::cfg{'APACHE_SUEXEC_USER_PREF'}$sysUid";
	my $sysGroup = "$main::cfg{'APACHE_SUEXEC_USER_PREF'}$sysGid";

	# Create subdomain mountpoint directory
	my $rs = make_dir($subDir, $sysUser, $sysGroup, 0755);
	return $rs if ($rs != 0);

	# Create cgi-bin directory
	$rs= make_dir("$subDir/cgi-bin", $sysUser, $sysGroup, 0755);
	return $rs if ($rs != 0);

	# Create phptmp directory
	$rs = make_dir(
		"$subDir/phptmp", $sysUser, $main::cfg{'APACHE_GROUP'}, 0770
	);
	return $rs if ($rs != 0);

	# Create htdocs directory with default page if it don't exist
	if (!-e "$subDir/htdocs/") {

		$rs = make_dir("$subDir/htdocs", $sysUser, $sysGroup, 0755);
		return $rs if ($rs != 0);

		# Get default index.html default page content
		($rs, my $indexTpl) = get_file(
			"$main::cfg{'ROOT_DIR'}/gui/domain_default_page/index.html"
		);
		return $rs if ($rs != 0);

		# Prepare index.html default page
		my $rVar = {
			'{DOMAIN_NAME}' => \$subName,
			'{BASE_SERVER_VHOST_PREFIX}' =>
				\$main::cfg{'BASE_SERVER_VHOST_PREFIX'},
			'{BASE_SERVER_VHOST}' => \$main::cfg{'BASE_SERVER_VHOST'}
		};

		for (keys %$rVar){
			($rs, $indexTpl) = repl_var($_, $indexTpl, ${$rVar->{$_}});
			return $rs if($rs != 0);
		}

		# Install index.html default page
		$rs = store_file(
			"$subDir/htdocs/index.html", $indexTpl, $sysUser, $sysGroup, 0644
		);
		return $rs if ($rs != 0);

		# Install all needed images for index.html default page
		$rs = sys_command_rs(
			"$main::cfg{'CMD_CP'} -Rp $main::cfg{'ROOT_DIR'}/gui/" .
				"domain_default_page/images $subDir/htdocs/"
			);
		return $rs if ($rs != 0);

		# Set user/group and permissions for all images
		$rs = setfmode("$subDir/htdocs/images/", $sysUser, $sysGroup, 0755);
		return $rs if ($rs != 0);

		for (glob "$subDir/htdocs/images/*") {
			$rs = setfmode($_, $sysUser, $sysGroup, 0644);
			return $rs if ($rs != 0);
		}
	}

	push_el(\@main::el, 'sub_add_httpd_file_data()', 'Ending...');

	0;
}

################################################################################
##
## Change subdomain httpd file data
##
## @param hashref $data subdomain entries
## @return int 0 on success
##
sub sub_change_httpd_file_data {

	push_el(\@main::el, 'sub_change_httpd_file_data()', 'Starting...');

	my ($data) = @_;

	if (!defined $data || $data eq '') {
		push_el(
			\@main::el, 'sub_change_httpd_file_data()',
			'[ERROR] Undefined Input Data...'
		);

		return -1;
	}

	my $wwwDir = $main::cfg{'APACHE_WWW_DIR'};
	my $subDir ="$wwwDir/@$data{domain_name}@$data{subdomain_mount}";
	my ($sysUid) = get_dmn_suexec_user(@$data{'domain_id'});
	my $sysUser = "$main::cfg{'APACHE_SUEXEC_USER_PREF'}$sysUid";

	# Subdomain entry support directories
	if(!-e "$subDir/phptmp") {
		my $rs = make_dir(
			"$subDir/phptmp", $sysUser, $main::cfg{'APACHE_GROUP'}, 0770
		);
		return $rs if ($rs != 0);
	}

	push_el(\@main::el, 'sub_change_httpd_file_data()', 'Ending...');

	0;
}

################################################################################
##
## Delete subdomain httpd file data
##
## @param hashref $data subdomain entries
## @return int 0 on success
##
sub sub_del_httpd_file_data {

	push_el(\@main::el, 'sub_del_httpd_file_data()', 'Starting...');

	my ($data) = @_;

	if (!defined $data || $data eq '') {
		push_el(
			\@main::el, 'sub_del_httpd_file_data()',
			'[ERROR] Undefined Input Data...'
		);

		return -1;
	}

	my $dmnName = @$data{'domain_name'};
	my $dmnId = @$data{'domain_id'};
	my $subName = "@$data{subdomain_name}.$dmnName";
	my $subMount = @$data{'subdomain_mount'};
	my $subDir = "$main::cfg{'APACHE_WWW_DIR'}/$dmnName$subMount";

	my $rs;

	# Custom http config
	if (-e "$main::cfg{'APACHE_CUSTOM_SITES_CONFIG_DIR'}/$subName.conf" ) {
		$rs = del_file(
			"$main::cfg{'APACHE_CUSTOM_SITES_CONFIG_DIR'}/$subName.conf"
		);
		return $rs if ($rs != 0);
	}

	# Skip data deletion if the mount point is shared

	my $sql = "
		SELECT
			count(`alias_id`)
		FROM
			`domain_aliasses`
		WHERE
			`domain_id` = $dmnId
		AND
			`alias_mount` = '$subMount'
		;
	";

	($rs, my $rData) = doSQL($sql);
	return $rs if ($rs != 0);

	return 0 if (@{@$rData[0]}[0] > 1);

	# Check for subdomains with same mount point
	$sql = "
		SELECT
			count(`subdomain_id`)
		FROM
			`subdomain`
		WHERE
			`domain_id` = $dmnId
		AND
			`subdomain_mount` = '$subMount'
		;
	";

	($rs, $rData) = doSQL($sql);
	return $rs if ($rs != 0);

	return 0 if (@{@$rData[0]}[0] > 1);

	# Delete subdomain entry support directories
	if(-e $subDir) {
		$rs = del_dir($subDir);
		return $rs if($rs != 0);
	}

	push_el(\@main::el, 'sub_del_httpd_file_data()', 'Ending...');

	0;
}

################################################################################
##
## Add subdomain httpd data
##
## @param hashref $data subdomain entries
## @return int 0 on success
##
sub sub_add_httpd_data {

	push_el(\@main::el, 'sub_add_httpd_data()', 'Starting...');

	my ($data) = @_;

	if (!defined $data || $data eq '') {
		push_el(
			\@main::el, 'sub_add_httpd_data()', '[ERROR] Undefined Input Data...'
		);

		return -1;
	}

	my $rs = sub_add_httpd_cfg_data($data);
	return $rs if ($rs != 0);

	$rs = sub_add_httpd_file_data($data);
	return $rs if ($rs != 0);

	push_el(\@main::el, 'sub_add_httpd_data()', 'Ending...');

	0;
}

################################################################################
##
## Change subdomain httpd data
##
## @param hashref $data subdomain entries
## @return int 0 on success
##
sub sub_change_httpd_data {

	push_el(\@main::el, 'sub_change_httpd_data()', 'Starting...');

	my ($data) = @_;

	if (!defined $data || $data eq '') {
		push_el(
			\@main::el, 'sub_change_httpd_data()',
			'[ERROR] Undefined Input Data...'
		);

		return -1;
	}

	my $rs = sub_change_httpd_cfg_data($data);
	return $rs if ($rs != 0);

	$rs = sub_change_httpd_file_data($data);
	return $rs if ($rs != 0);

	push_el(\@main::el, 'sub_change_httpd_data()', 'Ending...');

	0;
}

################################################################################
##
## Delete subdomain httpd data
##
## @param hashref $data subdomain entries
## @return int 0 on success
##
sub sub_del_httpd_data {

	push_el(\@main::el, 'sub_del_httpd_data()', 'Starting...');

	my ($data) = @_;

	if (!defined $data || $data eq '') {
		push_el(
			\@main::el, 'sub_del_httpd_data()', '[ERROR] Undefined Input Data...'
		);

		return -1;
	}

	my $rs = sub_del_httpd_cfg_data($data);
	return $rs if ($rs != 0);

	$rs = sub_del_httpd_file_data($data);
	return $rs if ($rs != 0);

	push_el(\@main::el, 'sub_del_httpd_data()', 'Ending...');

	0;
}

################################################################################
##                             MTA data managment                              #
################################################################################

################################################################################
##
## Add subdomain mta configuration data
##
## @param hashref $data subdomain entries
## @return int 0 on success
##
sub sub_add_mta_cfg_data {

	push_el(\@main::el, 'sub_add_mta_cfg_data()', 'Starting...');

	my ($data) = @_;

	if (!defined $data || $data eq '') {
		push_el(
			\@main::el, 'sub_add_mta_cfg_data()',
			'[ERROR] Undefined Input Data...'
		);

		return -1;
	}

	my $subName = "@$data{subdomain_name}.@$data{domain_name}";
	my $cfgDir = $main::cfg{'CONF_DIR'};
	my $sysFile = $main::cfg{'MTA_VIRTUAL_DMN_HASH'};
	my $wrkFile = "$cfgDir/postfix/working/domains";
	my $bkpFile = "$cfgDir/postfix/backup/domains." . time;

	# Get current working file content
	my ($rs, $wrkFileContent) = get_file($wrkFile);
	return $rs if ($rs != 0);

	# Checking for domain entry existance;
	$wrkFileContent =~ s/^$subName\t\t\t[^\n]+\n//gim;
	$wrkFileContent .= "$subName\t\t\tvsubdmn-entry\n";

	# Backup current production file before replace it
	if(-e $sysFile) {
		$rs = sys_command_rs("$main::cfg{'CMD_CP'} -p $sysFile $bkpFile");
		return $rs if($rs != 0);
	}

	# Store and install new production file
	for ($wrkFile, $sysFile) {
		$rs = store_file(
			$_, $wrkFileContent, $main::cfg{'ROOT_USER'},
			$main::cfg{'ROOT_GROUP'}, 0644
		);
		return $rs if ($rs != 0);
	}

	# Update lookup tables
	$rs = sys_command_rs("$main::cfg{'CMD_POSTMAP'} $sysFile");
	return $rs if ($rs != 0);

	push_el(\@main::el, 'sub_add_mta_cfg_data()', 'Ending...');

	0;
}

################################################################################
##
## Delete subdomain mta configuration data
##
## @param hashref $data subdomain entries
## @return int 0 on success
##
sub sub_del_mta_cfg_data {

	push_el(\@main::el, 'sub_del_mta_cfg_data()', 'Starting...');

	my ($data) = @_;

	if (!defined $data || $data eq '') {
		push_el(
			\@main::el, 'sub_del_mta_cfg_data()',
			'[ERROR] Undefined Input Data...'
		);

		return -1;
	}

	my $subName = "@$data{subdomain_name}.@$data{domain_name}";
	my $cfgDir = $main::cfg{'CONF_DIR'};
	my $sysFile = $main::cfg{'MTA_VIRTUAL_DMN_HASH'};
	my $wrkFile = "$cfgDir/postfix/working/domains";
	my $bkpFile = "$cfgDir/postfix/backup/domains." . time;

	# Get current working file
	my ($rs, $wrkFileContent) = get_file($wrkFile);
	return $rs if ($rs != 0);

	# Check for domain entry existance
	$wrkFileContent =~ s/^$subName\t\t\t[^\n]+\n//gim;

	# Backup current production file before replace it
	if(-e $sysFile) {
		$rs = sys_command_rs("$main::cfg{'CMD_CP'} -p $sysFile $bkpFile");
		return $rs if ($rs != 0);
	}

	# Store and install new production file
	for ($wrkFile, $sysFile) {
		$rs = store_file(
			$_, $wrkFileContent, $main::cfg{'ROOT_USER'},
			$main::cfg{'ROOT_GROUP'}, 0644
		);
		return $rs if ($rs != 0);
	}

	# Update lookup tables
	$rs = sys_command_rs("$main::cfg{'CMD_POSTMAP'} $sysFile");
	return $rs if ($rs != 0);

	push_el(\@main::el, 'sub_del_mta_cfg_data()', 'Ending...');

	0;
}

################################################################################
##
## Add subdomain mta file data
##
## @param hashref $data subdomain entries
## @return int 0 on success
##
sub sub_add_mta_file_data {

	push_el(\@main::el, 'sub_add_mta_file_data()', 'Starting...');

	my ($data) = @_;

	if (!defined $data || $data eq '') {
		push_el(
			\@main::el, 'sub_add_mta_file_data()',
			'[ERROR] Undefined Input Data...'
		);

		return -1;
	}

	my $rs = make_dir(
		"$main::cfg{'MTA_VIRTUAL_MAIL_DIR'}/@$data{subdomain_name}." .
			@$data{'domain_name'}, $main::cfg{'MTA_MAILBOX_UID_NAME'},
			$main::cfg{'MTA_MAILBOX_GID_NAME'}, 0700
	);
	return $rs if ($rs != 0);

	push_el(\@main::el, 'sub_add_mta_file_data()', 'Ending...');

	0;
}

################################################################################
##
## Delete subdomain mta file data
##
## @param hashref $data subdomain entries
## @return int 0 on success
##
sub sub_del_mta_file_data {

	push_el(\@main::el, 'sub_del_mta_file_data()', 'Starting...');

	my ($data) = @_;

	if (!defined $data || $data eq '') {
		push_el(
			\@main::el, 'sub_del_mta_file_data()',
			'[ERROR] Undefined Input Data...'
		);

		return -1;
	}

	my $rs = del_dir(
		"$main::cfg{'MTA_VIRTUAL_MAIL_DIR'}/@$data{subdomain_name}." .
			@$data{'domain_name'}
	);
	return $rs if ($rs != 0);

	push_el(\@main::el, 'sub_del_mta_file_data()', 'Ending...');

	0;
}

################################################################################
##
## Add subdomain mta data
##
## @param hashref $data subdomain entries
## @return int 0 on success
##
sub sub_add_mta_data {

	push_el(\@main::el, 'sub_add_mta_data()', 'Starting...');

	my ($data) = @_;

	if (!defined $data || $data eq '') {
		push_el(
			\@main::el, 'sub_add_mta_data()', '[ERROR] Undefined Input Data...'
		);

		return -1;
	}

	my $rs = sub_add_mta_cfg_data($data);
	return $rs if ($rs != 0);

	$rs = sub_add_mta_file_data($data);
	return $rs if ($rs != 0);

	push_el(\@main::el, 'sub_add_mta_data()', 'Ending...');

	0;
}

################################################################################
##
## Change subdomain mta data
##
## @param hashref $data subdomain entries
## @return int 0 on success
##
sub sub_change_mta_data {

	push_el(\@main::el, 'sub_change_mta_data()', 'Starting...');

	my ($data) = @_;

	if (!defined $data || $data eq '') {
		push_el(
			\@main::el, 'sub_change_mta_data()', '[ERROR] Undefined Input Data...'
		);

		return -1;
	}

	my $rs = sub_add_mta_data($data);
	return $rs if ($rs != 0);

	push_el(\@main::el, 'sub_change_mta_data()', 'Ending...');

	0;
}

################################################################################
##
## Delete subdomain mta data
##
## @param hashref $data subdomain entries
## @return int 0 on success
##
sub sub_del_mta_data {

	push_el(\@main::el, 'sub_del_mta_data()', 'Starting...');

	my ($data) = @_;

	if (!defined $data || $data eq '') {
		push_el(
			\@main::el, 'sub_del_mta_data()', '[ERROR] Undefined Input Data...'
		);

		return -1;
	}

	my $rs = sub_del_mta_cfg_data($data);
	return $rs if ($rs != 0);

	$rs = sub_del_mta_file_data($data);
	return $rs if ($rs != 0);

	push_el(\@main::el, 'sub_del_mta_data()', 'Ending...');

	0;
}

################################################################################
##                           Proftpd data managment                            #
################################################################################

################################################################################
##
## Add subdomain proftpd configuration data
##
## @param hashref $data subdomain entries
## @return int 0 on success
##
sub sub_add_proftpd_cfg_data {

	push_el(\@main::el, 'sub_add_proftpd_cfg_data()', 'Starting...');

	my ($data) = @_;

	if (!defined $data || $data eq '') {
		push_el(
			\@main::el, 'sub_add_proftpd_cfg_data()',
			'[ERROR] Undefined Input Data...'
		);
		return -1;
	}

	my $dmnId = @$data{'domain_id'};
	my $subMountPoint = @$data{'subdomain_mount'};
	my $subTo = @$data{'domain_name'};
	my $cfgDir = $main::cfg{'CONF_DIR'};
	my $proftpdCfgDir = $main::cfg{'FTPD_CONF_DIR'};
	my $subFname = "@$data{subdomain_name}.$subTo.conf";
	my $wrkFile = "$main::cfg{'CONF_DIR'}/proftpd/working/$subFname";
	my $sysFile = "$proftpdCfgDir/$subFname";

	# Dirty trik to allow mount point sharing
	my ($entry, $fill) = ('', 1);

	# First subdomains
	my $sql = "
		SELECT
			`subdomain_name`
		FROM
			`subdomain`
		WHERE
			`domain_id` = $dmnId
		AND
			`subdomain_id` != @$data{'subdomain_id'}
		AND
			`subdomain_mount` = '$subMountPoint'
		;
	";

	my ($rs, $rData) = doSQL($sql);
	return $rs if ($rs != 0);

	for (@$rData) {
		my $otherSub="$proftpdCfgDir/@${_[0]}.$subTo.conf";

		if(-e $otherSub && -s $otherSub) {
			push_el(
				\@main::el, 'als_add_proftpd_cfg_data()',
				"@${_[0]}.$subTo share same mount point. Skipping..."
			);

			$fill = 0;
		}
	}

	$sql = "
		SELECT
			`alias_name`
		FROM
			`domain_aliasses`
		WHERE
			`domain_id` = $dmnId
		AND
			`alias_mount` = '$subMountPoint'
		;
	";

	($rs, $rData) = doSQL($sql);
	return $rs if ($rs != 0);

	for (@$rData) {
		my $alias = "$proftpdCfgDir/@${_[0]}.conf";

		if(-e $alias && -s $alias){
			push_el(
				\@main::el, 'als_add_proftpd_cfg_data()',
				"@${_[0]} share same mount point. Skipping..."
			);

			$fill = 0;
		}
	}

	$sql = "
		SELECT
			`t1`.`subdomain_alias_name`, `t2`.`alias_name`
		FROM
			`subdomain_alias` AS `t1`
		LEFT JOIN
			(`domain_aliasses` AS `t2`)
		ON
			(`t1`.`alias_id` = `t2`.`alias_id`)
		WHERE
			`t2`.`domain_id` = $dmnId
		AND
			`subdomain_alias_mount` = '$subMountPoint'
		;
	";

	($rs, $rData) = doSQL($sql);
	return $rs if ($rs != 0);

	for (@$rData) {
		my $alsSub = "$proftpdCfgDir/@${_[0]}.@${_[1]}.conf";

		if(-e $alsSub && -s $alsSub){
			push_el(
				\@main::el, 'als_add_proftpd_cfg_data()',
				"@${_[0]}.@${_[1]} share same mount point. Skipping..."
			);

			$fill = 0;
		}
	}

	if ($fill == 1 && $subMountPoint ne '/') {

		($rs, $entry) = get_tpl("$cfgDir/proftpd/parts", 'proftpd.conf.tpl');
		return $rs if ($rs != 0);

		($rs, $entry) = prep_tpl(
			{'{PATH}' => "$main::cfg{'APACHE_WWW_DIR'}/$subTo$subMountPoint"},
			$entry
			);
		return $rs if ($rs != 0);
	}

	# Store and install new production file
	for ($wrkFile, $sysFile) {
		$rs = store_file(
			$_, $entry, $main::cfg{'ROOT_USER'}, $main::cfg{'ROOT_GROUP'}, 0644
		);
		return $rs if ($rs != 0);
	}

	push_el(\@main::el, 'sub_add_proftpd_cfg_data()', 'Ending...');

	0;
}

################################################################################
##
## Delete subdomain proftpd configuration data
##
## @param hashref $data subdomain entries
## @return int 0 on success
##
sub sub_del_proftpd_cfg_data {

	push_el(\@main::el, 'sub_del_proftpd_cfg_data()', 'Starting...');

	my ($data) = @_;

	if (!defined $data || $data eq '') {
		push_el(
			\@main::el, 'sub_del_proftpd_cfg_data()',
			'[ERROR] Undefined Input Data...'
		);

		return -1;
	}

	my $subFname = "@$data{subdomain_name}.@$data{domain_name}.conf";
	my $wrkFile = "$main::cfg{'CONF_DIR'}/proftpd/working/$subFname";
	my $sysFile = "$main::cfg{'FTPD_CONF_DIR'}/$subFname";

	# Remove working and production files
	for ($wrkFile, $sysFile) {
		if(-e $_) {
			my $rs = del_file($_);
			return $rs if ($rs != 0);
		}
	}

	push_el(\@main::el, 'sub_del_proftpd_cfg_data()', 'Ending...');

	0;
}

################################################################################
##
## Add subdomain proftpd data
##
## @param hashref $data subdomain entries
## @return int 0 on success
##
sub sub_add_proftpd_data {

	push_el(\@main::el, 'sub_add_proftpd_data()', 'Starting...');

	my ($data) = @_;

	if (!defined $data || $data eq '') {
		push_el(
			\@main::el, 'sub_add_proftpd_data()',
			'[ERROR] Undefined Input Data...'
		);
		return -1;
	}

	my $rs = sub_add_proftpd_cfg_data($data);
	return $rs if ($rs != 0);

	push_el(\@main::el, 'sub_add_proftpd_data()', 'Ending...');

	0;
}

################################################################################
##
## Change subdomain proftpd data
##
## @param hashref $data subdomain entries
## @return int 0 on success
##
sub sub_change_proftpd_data {

	push_el(\@main::el, 'sub_change_proftpd_data()', 'Starting...');

	my ($data) = @_;

	if (!defined $data || $data eq '') {
		push_el(
			\@main::el, 'sub_change_proftpd_data()',
			'[ERROR] Undefined Input Data...'
		);
		return -1;
	}

	my $rs = sub_add_proftpd_data($data);
	return $rs if ($rs != 0);

	push_el(\@main::el, 'sub_change_proftpd_data()', 'Ending...');

	0;
}

################################################################################
##
## Delete subdomain proftpd data
##
## @param hashref $data subdomain entries
## @return int 0 on success
##
sub sub_del_proftpd_data {

	push_el(\@main::el, 'sub_del_proftpd_data()', 'Starting...');

	my ($data) = @_;

	if (!defined $data || $data eq '') {
		push_el(
			\@main::el, 'sub_del_proftpd_data()',
			'[ERROR] Undefined Input Data...'
		);
		return -1;
	}

	my $rs = sub_del_proftpd_cfg_data($data);
	return $rs if ($rs != 0);

	push_el(\@main::el, 'sub_del_proftpd_data()', 'Ending...');

	0;
}

################################################################################
##                           High level subroutines                            #
################################################################################

################################################################################
##
## Add subdomain data
##
## @param hashref $data subdomain entries
## @return int 0 on success
##
sub sub_add_data {

	push_el(\@main::el, 'sub_add_data()', 'Starting...');

	my ($data) = @_;

	if (!defined $data || $data eq '') {
		push_el(\@main::el, 'sub_add_data()', '[ERROR] Undefined Input Data...');

		return -1;
	}

	my $rs;

	if($main::cfg{'CMD_FTPD'} ne 'no') {
		$rs = sub_add_proftpd_data($data);
		return $rs if ($rs != 0);
	}

	if($main::cfg{'CMD_NAMED'} ne 'no') {
		$rs = sub_add_named_db_data($data);
		return $rs if ($rs != 0);
	}

	if($main::cfg{'CMD_HTTPD'} ne 'no') {
		$rs = sub_add_httpd_data($data);
		return $rs if ($rs != 0);
	}

	if($main::cfg{'CMD_MTA'} ne 'no') {
		$rs = sub_add_mta_data($data);
		return $rs if ($rs != 0);
	}

	push_el(\@main::el, 'sub_add_data()', 'Ending...');

	0;
}

################################################################################
##
## Change subdomain data
##
## @param hashref $data subdomain entries
## @return int 0 on success
##
sub sub_change_data {

	push_el(\@main::el, 'sub_change_data()', 'Starting...');

	my ($data) = @_;

	if (!defined $data || $data eq '') {
		push_el(
			\@main::el, 'sub_change_data()', '[ERROR] Undefined Input Data...'
		);

		return -1;
	}

	my $rs;

	if($main::cfg{'CMD_FTPD'} ne 'no') {
		my $rs = sub_change_proftpd_data($data);
		return $rs if ($rs != 0);
	}

	if($main::cfg{'CMD_NAMED'} ne 'no') {
		$rs = sub_add_named_db_data($data);
		return $rs if ($rs != 0);
	}

	if($main::cfg{'CMD_HTTPD'} ne 'no') {
		$rs = sub_change_httpd_data($data);
		return $rs if ($rs != 0);
	}

	if($main::cfg{'CMD_MTA'} ne 'no') {
		$rs = sub_change_mta_data($data);
		return $rs if ($rs != 0);
	}
	push_el(\@main::el, 'sub_change_data()', 'Ending...');

	0;
}

################################################################################
##
## Delete subdomain data
##
## @param hashref $data subdomain entries
## @return int 0 on success
##
sub sub_del_data {

	push_el(\@main::el, 'sub_del_data()', 'Starting...');

	my ($data) = @_;

	if (!defined $data || $data eq '') {
		push_el(\@main::el, 'sub_del_data()', '[ERROR] Undefined Input Data...');

		return -1;
	}

	my $rs;

	if($main::cfg{'CMD_FTPD'} ne 'no') {
		$rs = sub_del_proftpd_data($data);
		return $rs if ($rs != 0);
	}

	if($main::cfg{'CMD_NAMED'} ne 'no') {
		$rs = sub_del_named_db_data($data);
		return $rs if ($rs != 0);
	}

	if($main::cfg{'CMD_HTTPD'} ne 'no') {
		$rs = sub_del_httpd_data($data);
		return $rs if ($rs != 0);
	}

	if($main::cfg{'CMD_MTA'} ne 'no') {
		$rs = sub_del_mta_data($data);
		return $rs if ($rs != 0);
	}

	push_el(\@main::el, 'sub_del_data()', 'Ending...');

	0;
}

################################################################################
##
## Perform all tasks to add, change or delete data related to one subdomain
##
## @return int 0 on success
## @global int $main::sub_task_id Subdomain id to be processed
##
sub sub_mngr_engine {

	push_el(\@main::el, 'sub_mngr_engine()', 'Starting...');

	my $sql = "
		SELECT
			`t1`.`subdomain_id`, `t1`.`domain_id`, `t1`.`subdomain_name`,
			`t1`.`subdomain_mount`, `t1`.`subdomain_status`, `t2`.`domain_name`,
			`t2`.`domain_php`, `t2`.`domain_cgi`, `t3`.`ip_number`
		FROM
			`subdomain` AS `t1`, `domain` AS `t2`, `server_ips` AS `t3`
		WHERE
			`t1`.`domain_id` = `t2`.`domain_id`
		AND
			`t2`.`domain_ip_id` = `t3`.`ip_id`
		AND
			`t1`.`subdomain_id` = $main::sub_task_id
		;
	";

	# Get all required subdomain data
	my ($rs, $rows) = doHashSQL($sql, 'subdomain_id');
	return $rs if ($rs != 0);

	my $entry = @$rows{$main::sub_task_id};
	my $sub_status = @$entry{'subdomain_status'};

	if($sub_status eq 'toadd') { # Add new subdomain data
		$rs = sub_add_data($entry);
	} elsif($sub_status eq 'change') { # Change subdomain data
		$rs = sub_change_data($entry);
	} elsif($sub_status eq 'delete') { # Delete subdomain data
		$rs = sub_del_data($entry);
	}  else { # Unknown task type
		push_el(
			\@main::el, 'sub_mngr_engine()',
			"[ERROR] Unknown task type: `$sub_status`!"
		);

		return -1;
	}

	if($sub_status eq 'delete' && $rs == 0) {
		$sql = "
			DELETE FROM
				`subdomain`
			WHERE
				`subdomain_id` = $main::sub_task_id
			;
		";
	} else {
		if($rs == 0) {
			$sub_status = $main::db->quote('ok');
		} else {
			my ($sub_name, $msg) = split(/$main::el_sep/, pop_el(\@main::el));
			$sub_status = $main::db->quote("$sub_name | $msg");
		}

		$sql = "
			UPDATE
				subdomain
			SET
				subdomain_status = $sub_status
			WHERE
				subdomain_id = $main::sub_task_id
			;
		";
	}

	# Update subdomain status or remove entry on delete
	($rs) = doSQL($sql);
	return $rs if ($rs != 0);

	push_el(\@main::el, 'sub_mngr_engine()', 'Ending...');

	0;
}

################################################################################
##                               MAIN PROGRAM                                 ##
################################################################################

my $rs = sub_mngr_start_up();

if ($rs != 0) {
	dump_el(\@main::el, $main::ispcp_sub_mngr_el);
	sub_mngr_shut_down();

	exit 1;
}

$rs = sub_mngr_engine();

if ($rs != 0) {
	dump_el(\@main::el, $main::ispcp_sub_mngr_el);
	sub_mngr_shut_down();

	exit 1;
}

$rs = sub_mngr_shut_down();

if ($rs != 0) {
	dump_el(\@main::el, $main::ispcp_sub_mngr_el);

	exit 1;
}

exit 0;
