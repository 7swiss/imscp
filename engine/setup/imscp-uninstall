#!/usr/bin/perl

# i-MSCP - internet Multi Server Control Panel
# Copyright (C) 2010-2019 by internet Multi Server Control Panel
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.

=head1 NAME

 imscp-uninstall Uninstall i-MSCP

=head1 SYNOPSIS

 imscp-uninstall [options]...

=cut

# TODO: This script should be idempotent.

use strict;
use warnings;
use FindBin;
use lib "$FindBin::Bin/../PerlLib", "$FindBin::Bin/../PerlVendor";
use File::Basename;
use iMSCP::Boolean;
use iMSCP::Bootstrapper;
use iMSCP::Database;
use iMSCP::DbTasksProcessor;
use iMSCP::Debug qw/ debug error /;
use iMSCP::Dialog;
use iMSCP::Dir;
use iMSCP::File;
use iMSCP::Getopt;
use iMSCP::Packages;
use iMSCP::Servers;
use iMSCP::Service;
use iMSCP::Stepper qw/ step endDetail startDetail /;
use iMSCP::SystemUser;
use Servers::sqld;
use Servers::sqld;

$ENV{'LANG'} = 'C.UTF-8';
$ENV{'PATH'} = '/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin';

# Set backend mode
$::execmode = 'uninstall' unless defined $::execmode;

# Required by servers un-installers
%::oldConfig = () unless defined %::oldConfig;

newDebug( 'imscp-uninstall.log' );

sub startUp
{
    iMSCP::Getopt->debug( TRUE ); # Enforce debug mode (logs)
    iMSCP::Bootstrapper->getInstance()->boot();
    0;
}

sub process
{
    _userDialog();

    local $@;
    my $row = eval {
        my $dbh = iMSCP::Database->factory()->getRawDb();
        local $dbh->{'RaiseError'} = TRUE;
        $dbh->selectrow_hashref(
            "SELECT 1 FROM `plugin` WHERE `plugin_status` <> 'uninstalled'"
        );
    };
    if ( $@ ) {
        error( $@ );
        return 1;
    } elsif ( $row ) {
        iMSCP::Dialog->getInstance()->infobox( <<'EOF' );
\Z1Uninstallation aborted.\Zn

You must first uninstall all i-MSCP plugins through the control panel interface.
EOF
        exit 0;
    }

    undef $row;

    my @steps = (
        [ \&_removeCustomers, 'Removing i-MSCP customers' ],
        [ \&_uninstallPackages, 'Uninstalling i-MSCP packages' ],
        [ \&_uninstallServers, 'Uninstalling i-MSCP servers' ],
        [ \&_uninstallServices, 'Uninstalling i-MSCP services' ],
        [ \&_removeLogrotateFile, 'Removing i-MSCP logrotate file' ],
        [ \&_removeSysctlFile, 'Removing i-MSCP sysctl file' ],
        [ \&_removeSqlData, 'Removing i-MSCP SQL data' ],
        [ \&_removeSystemUser, 'Removing i-MSCP system user' ],
        [ \&_removeFiles, 'Removing i-MSCP files' ],
    );

    my ( $step, $rs ) = ( 1, 0 );
    for my $task ( @steps ) {
        $rs = step( @{ $task }, scalar @steps, $step );
        last if $rs;
        $step++;
    }

    $rs ||= iMSCP::Dialog->getInstance()->endGauge();
}

sub shutDown
{

    iMSCP::Dialog->getInstance()->infobox( <<'EOF' );

\Z1Congratulations\Zn

iMSCP has been successfully uninstalled.

You can find uninstallation logs at /var/log/imscp/imscp-uninstall.log
EOF

    0;
}

sub _userDialog
{
    my $dialog = iMSCP::Dialog->getInstance();
    $dialog->set( 'title', 'i-MSCP Uninstaller Dialog' );

    exit 0 if $dialog->yesno( <<"EOF", TRUE );

Welcome to the \\Z4i-MSCP $::imscpConfig{'Version'}\\Zn uninstaller dialog.

This program will uninstall i-MSCP from your server.

\\Z1WARNING:\\Zn All i-MSCP data will be removed.

Do you want to continue?
EOF
}

sub _removeCustomers
{
    local $@;
    eval {
        {
            my $tables = {
                admin           => [ 'admin_status', "WHERE admin_type = 'user'" ],
                domain          => 'domain_status',
                domain_aliasses => 'alias_status',
                subdomain       => 'subdomain_status',
                subdomain_alias => 'subdomain_alias_status',
                mail_users      => 'status',
                htaccess        => 'status',
                htaccess_groups => 'status',
                htaccess_users  => 'status',
                ssl_certs       => 'status'
            };
            my $condition;

            my $db = iMSCP::Database->factory();
            my $oldDbName = $db->useDatabase( $::imscpConfig{'DATABASE_NAME'} );

            my $dbh = $db->getRawDb();
            local $dbh->{'RaiseError'} = TRUE;

            while ( my ( $table, $field ) = each %{ $tables } ) {
                if ( ref $field eq 'ARRAY' ) {
                    $condition = $field->[1];
                    $field = $field->[0];
                } else {
                    $condition = ''
                }

                ( $table, $field ) = (
                    $dbh->quote_identifier( $table ),
                    $dbh->quote_identifier( $field )
                );
                $dbh->do( "UPDATE $table SET $field = 'todelete' $condition" );
            }

            $db->useDatabase( $oldDbName ) if $oldDbName;
        }

        startDetail();
        iMSCP::DbTasksProcessor->getInstance(
            mode => 'uninstall'
        )->processDbTasks();
        endDetail();
    };
    if ( $@ ) {
        error( $@ );
        return 1;
    }

    0;
}

sub _uninstallPackages
{
    startDetail();

    my @packages = iMSCP::Packages->getInstance()->getList();
    my $nbSteps = scalar @packages;
    my ( $step, $rs ) = ( 1, 0 );

    for my $package ( @packages ) {
        ( my $sub = $package->can( 'uninstall' ) ) or $step++ && next;
        $rs = step(
            sub { $sub->( $package->getInstance()) },
            sprintf( 'Executing %s uninstallation tasks...', $package ),
            $nbSteps,
            $step
        );
        last if $rs;
    }

    endDetail();
    $rs;
}

sub _uninstallServers
{
    startDetail();

    my @servers = iMSCP::Servers->getInstance()->getList();
    my $nbSteps = scalar @servers;
    my ( $step, $rs ) = ( 1, 0 );

    for my $server ( @servers ) {
        ( my $sub = $server->can( 'uninstall' ) ) or $step++ && next;
        $rs = step(
            sub { $sub->( $server->factory()) },
            sprintf( 'Executing %s uninstallation tasks...', $server ),
            $nbSteps,
            $step
        );
        last if $rs;
        $step++;
    }

    endDetail();
    $rs;
}

sub _uninstallServices
{
    my $serviceMngr = iMSCP::Service->getInstance();

    for my $service ( qw/ imscp_daemon imscp_traffic imscp_mountall / ) {
        $serviceMngr->remove( $service )
    }

    for my $service ( qw/ bind9 bind9-resolvconf / ) {
        $serviceMngr->disable( $service ) if $serviceMngr->isSystemd();

        if ( -f "/etc/systemd/system/$service.service" ) {
            my $rs = iMSCP::File->new(
                filename => "/etc/systemd/system/$service.service"
            )->delFile();
            return $rs if $rs;
        }

        if ( -f "/lib/systemd/system/$service.service"
            && $serviceMngr->isSystemd()
        ) {
            $serviceMngr->enable( $service );
        }
    }

    0;
}

sub _removeLogrotateFile
{
    return 0 unless -f "$::imscpConfig{'LOGROTATE_CONF_DIR'}/imscp";

    iMSCP::File->new(
        filename => "$::imscpConfig{'LOGROTATE_CONF_DIR'}/imscp"
    )->delFile();
}

sub _removeSysctlFile
{
    return 0 unless -f '/etc/sysctl.d/imscp.conf';

    iMSCP::File->new( filename => '/etc/sysctl.d/imscp.conf' )->delFile();
}

sub _removeSqlData
{
    local $@;
    eval {
        my $sqlServer = Servers::sqld->factory();
        my $dbh = iMSCP::Database->factory()->getRawDb();

        # Remove customer's sql users
        my $rows = $dbh->selectall_hashref(
            'SELECT DISTINCT sqlu_name, sqlu_host FROM sql_user',
            'sqlu_name'
        );

        for my $sqlUser ( keys %{ $rows } ) {
            $sqlServer->dropUser(
                $rows->{$sqlUser}->{'sqlu_name'},
                $rows->{$sqlUser}->{'sqlu_host'}
            );
        }

        # Remove customer's sql databases
        $rows = $dbh->selectall_hashref(
            'SELECT sqld_name FROM sql_database', 'sqld_name'
        );
        for my $database ( keys %{ $rows } ) {
            $dbh->do( 'DROP DATABASE IF EXISTS ' . $dbh->quote_identifier(
                $rows->{$database}->{'sqld_name'}
            ));
        }

        # Remove i-MSCP sql database
        $dbh->do( 'DROP DATABASE IF EXISTS ' . $dbh->quote_identifier(
            $::imscpConfig{'DATABASE_NAME'}
        ));

        # Drop i-MSCP master SQL user
        $sqlServer->dropUser(
            $::imscpConfig{'DATABASE_USER'},
            $::imscpConfig{'DATABASE_USER_HOST'}
        );
    };
    if ( $@ ) {
        error( $@ );
        return 1;
    }

    0;
}

sub _removeSystemUser
{
    iMSCP::SystemUser->new(
        force => TRUE
    )->delSystemUser(
        $::imscpConfig{'IMSCP_USER'}
    );
}

sub _removeFiles
{
    chdir( '/' );

    for my $file (
        '/usr/local/sbin/imscp-dpkg-post-invoke.pl',
        '/etc/apt/apt.conf.d/90imscp'
    ) {
        next unless -f $file;
        my $rs = iMSCP::File->new( filename => $file )->delFile();
        return $rs if $rs;
    }

    local $@;
    eval {
        for my $dir (
            $::imscpConfig{'CONF_DIR'},
            $::imscpConfig{'USER_WEB_DIR'},
            $::imscpConfig{'LOG_DIR'},
            $::imscpConfig{'ROOT_DIR'}
        ) {
            iMSCP::Dir->new( dirname => $dir )->remove();
        }
    };
    if ( $@ ) {
        error( $@ );
        return 1;
    }

    0;
}

my $rs = startUp();
$rs ||= process();
$rs ||= shutDown();
exit $rs;

=head1 AUTHOR

 i-MSCP Team <team@i-mscp.net>

=cut
