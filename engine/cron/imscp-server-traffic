#!/usr/bin/perl

=head1 NAME

 imscp-server-traffic - Update server' traffic data.

=head1 SYNOPSIS

 imscp-server-traffic [OPTION]...

=cut

# i-MSCP - internet Multi Server Control Panel
# Copyright (C) 2010-2019 by Laurent Declercq <l.declercq@nuxwin.com>
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.

use strict;
use warnings;
use FindBin;
use lib "$FindBin::Bin/../PerlLib", "$FindBin::Bin/../PerlVendor";
use File::Basename;
use iMSCP::Boolean;
use iMSCP::Bootstrapper;
use iMSCP::Database;
use iMSCP::Debug qw/ debug error getMessageByType setVerbose newDebug /;
use iMSCP::Execute 'execute';
use iMSCP::Getopt;
use iMSCP::ProgramFinder;
use iMSCP::Mail 'sendErrorMessage';
use Try::Tiny;

$ENV{'LANG'} = 'C.UTF-8';
$ENV{'PATH'} = '/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin';

=over

=item _parseTrafficData( \$trafficData, $container )

 Parse the given input/output traffic data string

 Param scalarref $trafficData Traffic data string as outputted by the iptable(8) -nvxL <chain> command
 Param hashref \%container Traffic data container
 Return void

=cut

sub _parseTrafficData
{
    my ( $trafficData, $container ) = @_;

    while ( ${ $trafficData } =~ /^\s+\d+\s+(\d+).*?(?:(?:dpt|spt):(\d+))?$/gm ) {
        if ( $2 ) {
            if ( grep ( $_ eq $2, 587, 25, 465 ) ) {
                $container->{'smtp'} += $1
            } elsif ( grep ( $_ eq $2, 110, 995, 143, 993 ) ) {
                $container->{'po'} += $1;
            } else {
                $container->{'web'} += $1;
            }

            next;
        }

        $container->{'all'} += $1;
    }
}

=item getTrafficData( $bin, \%container )

 Get traffic data from i-MSCP IPv4 or IPv6 input/output chains

 Param string $bin IPTABLES(8) binary path
 Param hashref \%container Traffic data container
 Return void, die on failure

=cut

sub getTrafficData
{
    my ( $bin, $container ) = @_;

    my %chains = (
        IMSCP_INPUT  => \my $input,
        IMSCP_OUTPUT => \my $output
    );

    # Gets input/output traffic data from both IMSCP_INPUT and IMSCP_OUTPUT
    # chains and reset them.
    while ( my ( $chain, $stdout ) = each( %{chains} ) ) {
        execute( "$bin -t filter -nvxL $chain", $stdout, \my $stderr );
        debug( ${ $stdout } ) if length ${ $stdout };

        if ( length $stderr ) {
            # No chain found (or any other error)...
            error( $stderr );
            next;
        }

        execute( "$bin -t filter -Z $chain", undef, \$stderr );
        error( $stderr ) if length $stderr;
    }

    # Parse input/output traffic data
    _parseTrafficData( \$input, $container->{'in'} ) if length $input;
    _parseTrafficData( \$output, $container->{'out'} ) if length $output;
}

newDebug( 'imscp-server-traffic.log' );

iMSCP::Getopt->parseNoDefault( sprintf( 'Usage: perl %s [OPTION]...', basename( $0 )) . qq{

Update server' traffic data.

OPTIONS:
 -d,    --debug         Enable debug mode.
 -v,    --verbose       Enable verbose mode.},
    'debug|d'   => \&iMSCP::Getopt::debug,
    'verbose|v' => \&iMSCP::Getopt::verbose
);

setVerbose( iMSCP::Getopt->verbose );

my $bootstrapper = iMSCP::Bootstrapper->getInstance();
exit unless $bootstrapper->lock( '/var/lock/imscp-server-traffic.lock', TRUE );
$bootstrapper->boot( {
    config_readonly => TRUE,
    nolock          => TRUE
} );

try {
    my %data = ( 'in', { qw/ all 0 smtp 0 po 0 web 0 / }, 'out', { qw/ all 0 smtp 0 po 0 web 0 / } );

    for my $bin ( iMSCP::ProgramFinder::find( 'iptables' ), $::imscpConfig{'IPV6_SUPPORT'} && iMSCP::ProgramFinder::find( 'ip6tables' ) ) {
        getTrafficData( $bin, \%data ) if $bin;
    }

    return unless $data{'in'}->{'all'} > 0 || $data{'out'}->{'all'} > 0;

    # Update traffic data in database
    iMSCP::Database->factory()->getConnector()->run( fixup => sub
    {
        my $timestamp = time();
        $timestamp -= ( $timestamp % 1800 ); # Floor down for the last half'n hour
        $_->do(
            '
                INSERT INTO server_traffic (
                    traff_time, bytes_in, bytes_out, bytes_mail_in, bytes_mail_out, bytes_pop_in, bytes_pop_out, bytes_web_in, bytes_web_out
                ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ? ) ON DUPLICATE KEY UPDATE
                    bytes_in = bytes_in + ?, bytes_out = bytes_out + ?, bytes_mail_in = bytes_mail_in + ?, bytes_mail_out = bytes_mail_out + ?,
                    bytes_pop_in = bytes_pop_in + ?, bytes_pop_out = bytes_pop_out + ?, bytes_web_in = bytes_web_in + ?,
                    bytes_web_out = bytes_web_out + ?
            ',
            undef,
            # Insert data
            $timestamp,
            $data{'in'}->{'all'}, $data{'out'}->{'all'}, $data{'in'}->{'smtp'}, $data{'out'}->{'smtp'}, $data{'in'}->{'po'}, $data{'out'}->{'po'},
            $data{'in'}->{'web'}, $data{'in'}->{'web'},
            # On duplicate data
            $data{'in'}->{'all'}, $data{'out'}->{'all'}, $data{'in'}->{'smtp'}, $data{'out'}->{'smtp'}, $data{'in'}->{'po'}, $data{'out'}->{'po'},
            $data{'in'}->{'web'}, $data{'out'}->{'web'},
        );
    } );
} catch {
    error( $_ );
} finally {
    if ( my @errors = getMessageByType( 'error', { remove => TRUE } ) ) {
        sendErrorMessage( join "\n", @errors );
    }
};

=back

=head1 AUTHOR

 Laurent Declercq <l.declercq@nuxwin.com>

=cut

1;
__END__
