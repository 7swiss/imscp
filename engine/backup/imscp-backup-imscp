#!/usr/bin/perl

=head1 NAME

 imscp-backup-imscp backup i-MSCP configuration files and database.

=head1 SYNOPSIS

 imscp-backup-imscp [OPTION]...

=cut

# i-MSCP - internet Multi Server Control Panel
# Copyright (C) 2010-2018 by internet Multi Server Control Panel
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.

use strict;
use warnings;
use File::Basename;
use File::Spec;
use FindBin;
use lib "$FindBin::Bin/../PerlLib";
use iMSCP::Bootstrapper;
use iMSCP::Debug qw/ debug error newDebug /;
use iMSCP::Execute qw/ execute escapeShell /;
use iMSCP::File;
use iMSCP::Dir;
use iMSCP::Getopt;
use iMSCP::Mail;
use POSIX qw/ strftime locale_h /;

setlocale( LC_MESSAGES, "C.UTF-8" );

$ENV{'LANG'} = 'C.UTF-8';

our $command = {
    pbzip2 => {
        extension => 'bz2',
        command   => 'nice -n 19 ionice -c2 -n7 pbzip2'
    },
    bzip2  => {
        extension => 'bz2',
        command   => 'nice -n 19 ionice -c2 -n7 bzip2'
    },
    gzip   => {
        extension => 'gz',
        command   => 'nice -n 19 ionice -c2 -n7 gzip'
    },
    pigz   => {
        extension => 'gz',
        command   => 'nice -n 19 ionice -c2 -n7 pigz'
    },
    lzma   => {
        extension => 'lzma',
        command   => 'nice -n 19 ionice -c2 -n7 lzma'
    },
    xz     => {
        extension => 'xz',
        command   => 'nice -n 19 ionice -c2 -n7 xz'
    }
};

=head1 DESCRIPTION

 Backup i-MSCP data

=head1 PUBLIC METHODS

=over 4

=item backupDatabase()

 Backup i-MSCP database

=cut

sub backupDatabase
{
    eval {
        my $db = iMSCP::Database->getInstance();
        $db->dumpdb( $::imscpConfig{'DATABASE_NAME'}, $::imscpConfig{'BACKUP_FILE_DIR'} );

        # Encode slashes as SOLIDUS unicode character
        # Encode dots as Full stop unicode character
        ( my $encodedDbName = $::imscpConfig{'DATABASE_NAME'} ) =~ s%([./])%{ '/', '@002f', '.', '@002e' }->{$1}%ge;
        my $date = strftime "%Y.%m.%d-%H-%M", localtime;

        iMSCP::File->new( filename => $::imscpConfig{'BACKUP_FILE_DIR'} . '/' . $encodedDbName . '.sql' )->move(
            $::imscpConfig{'BACKUP_FILE_DIR'} . '/' . $encodedDbName . '-' . $date . '.sql'
        );

        my $algo = lc( $::imscpConfig{'BACKUP_COMPRESS_ALGORITHM'} );
        my $level = $::imscpConfig{'BACKUP_COMPRESS_LEVEL'};
        $level = 1 unless $level =~ /^[1-9]$/;

        if ( $algo ne 'no' ) {
            my @cmd = (
                $command->{$algo}->{'command'}, "-$level", '--force',
                escapeShell( $::imscpConfig{'BACKUP_FILE_DIR'} . '/' . $encodedDbName . '-' . $date . '.sql' )
            );
            my $rs = execute( "@cmd", \my $stdout, \my $stderr );
            debug( $stdout ) if $stdout;
            # Tar exit with status 1 only if some files were changed while being read. We want ignore this.
            $rs < 2 or die( $stderr || 'Unknown error' );
        }
    };
    !$@ or error( $@ );
}

=item _backupConfig( )

 Backup i-MSCP config

 Return void

=cut

sub backupConfig
{
    eval {
        my $date = strftime "%Y.%m.%d-%H-%M", localtime;
        my $archivePath = "$::imscpConfig{'BACKUP_FILE_DIR'}/config-backup-$date.tar";
        my $algo = lc( $::imscpConfig{'BACKUP_COMPRESS_ALGORITHM'} );
        my $level = $::imscpConfig{'BACKUP_COMPRESS_LEVEL'};
        $level = 1 unless $level =~ /^[1-9]$/;
        $archivePath .= '.' . $command->{$::imscpConfig{'BACKUP_COMPRESS_ALGORITHM'}}->{'extension'} if $algo ne 'no';

        my @backupCommand = (
            "nice -n 19 ionice -c2 -n7 tar -c -C $::imscpConfig{'CONF_DIR'}",
            '--exclude=?*[0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9]',
            '--preserve-permissions', '.', ( $algo eq 'no' ? "-f $archivePath" : "| $command->{$algo}->{'command'} -$level > $archivePath" )
        );

        my $rs = execute( "@backupCommand", \my $stdout, \my $stderr );
        debug( $stdout ) if $stdout;
        !$rs or die( $stderr || 'Unknown error' );
    };
    !$@ or error( $@ );
}

=item backupAll( )

 Backup i-MSCP data

 Return void

=cut

sub backupAll
{
    eval {
        my $algo = lc( $::imscpConfig{'BACKUP_COMPRESS_ALGORITHM'} );

        exists $command->{$algo} || $algo eq 'no' or die( sprintf( 'Backup algorithm not supported: %s', $algo ));

        # Make sure that backup directory exists
        iMSCP::Dir->new( dirname => $::imscpConfig{'BACKUP_FILE_DIR'} )->make( {
            user  => $::imscpConfig{'ROOT_USER'},
            group => $::imscpConfig{'ROOT_GROUP'},
            mode  => 0750
        } );

        backupDatabase();
        backupConfig();

        # Remove any backup older than 7 days
        my $rs = execute( "find $::imscpConfig{'BACKUP_FILE_DIR'}/* -maxdepth 0 -type f -mtime +7 -print | xargs -r rm", \my $stdout,
            \my $stderr );
        debug( $stdout ) if $stdout;
        !$rs or die( $stderr || 'Unknown error' );
    };
    !$@ or error( $@ );
}

newDebug( 'imscp-backup-imscp.log' );

# Parse command line options
iMSCP::Getopt->parseNoDefault( sprintf( "Usage: perl %s [OPTION]...", basename( $0 )) . qq{

Script which backup i-MSCP configuration files and database.

OPTIONS:
 -v,    --verbose       Enable verbose mode.},
    'debug|d'   => \&iMSCP::Getopt::debug,
    'verbose|v' => \&iMSCP::Getopt::verbose
);

exit unless iMSCP::Bootstrapper->getInstance()->boot( {
    config_readonly => 1,
    nolock          => 1
} )->lock( "$::imscpConfig{'LOCK_DIR'}/imscp-backup-imscp.lock", 'nowait' );

backupAll();

=back

=head1 AUTHOR

 i-MSCP Team <team@i-mscp.net>

=cut

1;
__END__
