=head1 NAME

 iMSCP::Servers::Mta::Postfix::Driver::Database::Hash - i-MSCP hash database driver for Postfix

=cut

# i-MSCP - internet Multi Server Control Panel
# Copyright (C) 2010-2018 Laurent Declercq <l.declercq@nuxwin.com>
#
# This library is free software; you can redistribute it and/or
# modify it under the terms of the GNU Lesser General Public
# License as published by the Free Software Foundation; either
# version 2.1 of the License, or (at your option) any later version.
#
# This library is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
# Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public
# License along with this library; if not, write to the Free Software
# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA

package iMSCP::Servers::Mta::Postfix::Driver::Database::Hash;

use strict;
use warnings;
use autouse 'iMSCP::Rights' => qw/ setRights /;
use Class::Autouse qw/ :nostat iMSCP::Dir /;
use iMSCP::File;
use iMSCP::SetRights;
use iMSCP::Boolean;
use parent 'iMSCP::Servers::Mta::Postfix::Driver::Database::Abstract';

=head1 DESCRIPTION

 i-MSCP hash database driver for Postfix.
 
 See http://www.postfix.org/DB_README.html

=head1 PUBLIC METHODS

=over 4

=item preinstall( )

 See iMSCP::Servers::Mta::Postfix::Driver::Database::Abstract::deleteEntry()

 TODO: Load file into hash for faster processing (using Config::General module?)

=cut

sub install
{
    my ($self) = @_;

    $self->_setupDefaultDatabases();
}

=item uninstall( )

 See iMSCP::Servers::Mta::Postfix::Driver::Database::Abstract::deleteEntry()

=cut

sub uninstall
{
    my ($self) = @_;

    iMSCP::Dir->new( dirname => $self->{'mta'}->{'config'}->{'MTA_VIRTUAL_CONF_DIR'} )->remove();
}

=item setEnginePermissions( )

 See iMSCP::Servers::Mta::Postfix::Driver::Database::Abstract::deleteEntry()

=cut

sub setEnginePermissions
{
    my ($self) = @_;

    setRights( $self->{'config'}->{'MTA_VIRTUAL_CONF_DIR'},
        {
            user      => $::imscpConfig{'ROOT_USER'},
            group     => $::imscpConfig{'ROOT_GROUP'},
            dirmode   => '0750',
            filemode  => '0640',
            recursive => 1
        }
    );
}

=item add( $path [, $key [, $value ] ] )

 See iMSCP::Servers::Mta::Postfix::Driver::Database::Abstract::addEntry()

=cut

sub add
{
    my ($self, $path, $key, $value) = @_;

    my $file = $self->_getDbFileObj( $path );

    return unless defined $key;

    my $entry = "$key\t@{[ $value //= 'OK' ]}";
    my $mapFileContentRef = $file->getAsRef();
    ${$mapFileContentRef} =~ s/^\Q$entry\E\n//gim;
    ${$mapFileContentRef} .= "$entry\n";
    $file->save();
    $self->{'mta'}->postmap( $path, $self->getDbType(), TRUE );
}

=item delete( $path [, $key ] )

 See iMSCP::Servers::Mta::Postfix::Driver::Database::Abstract::deleteEntry()

=cut

sub delete
{
    my ($self, $path, $key) = @_;

    my $file = $self->_getDbFileObj( $path );

    unless ( defined $key ) {
        $file->remove();
        undef( $file );
        undef( $self->{'_databases_file_objects'}->{$path} );
        return;
    }

    my $mapFileContentRef = $file->getAsRef();
    return unless ${$mapFileContentRef} =~ s/^\Q$key\E\t.*\n//gim;

    $file->save();
    $self->{'mta'}->postmap( $path, $self->getDbType(), TRUE );
}

=item getDbType( )

 See iMSCP::Server::Mta::Posfix::Driver::Database::Abstract::getDbType()

=cut

sub getDbType
{
    my ($self) = @_;

    'hash';
}

=back

=head1 PRIVATE METHODS

=over 4

=item _init( )

 Initialize instance

 See iMSCP::Servers::Mta::_init()

=cut

sub _init
{
    my ($self) = @_;

    ref $self ne __PACKAGE__ or croak( sprintf( 'The %s class is an abstract class which cannot be instantiated', __PACKAGE__ ));
    $self->{'_databases_file_objects'} = {};
    $self->SUPER::_init();
}

=item _getDbFileObj( $path )

 Get database file object for the given database

 Param string $path Database path
 Return iMSCP::File, die on failure

=cut

sub _getDbFileObj
{
    my ($self, $path) = @_;

    $self->{'_databases_file_objects'}->{$path} ||= do {
        my $file = iMSCP::File->new( filename => $path );

        unless ( -f $path ) {
            $file->set( <<"EOF"
# Postfix @{ [ basename( $path ) ] } map - auto-generated by i-MSCP
#     DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTEN

EOF
            )->save( UMASK => 0027 );
            $self->{'mta'}->postmap( $path, $self->getDbType(), TRUE );
        }

        # Preload table in memory
        # We need raise default slurp limit since default value (2 MiB) is far too low.
        # 10 Mib should be far enough. A table with 10k entries take less than 2 MiB
        # FIXME: Make this configurable thourgh postfix.data conffile
        local $iMSCP::File::SLURP_SIZE_LIMIT = 1024 * 1024 * 10;
        $file->getAsRef();
        $file;
    }
}

=item _setupDefaultDatabases( )

 Setup default databases

 Return void, die on failure

=cut

sub _setupDefaultDatabases
{
    my ($self) = @_;

    # Make sure to start with a clean directory by re-creating it from scratch
    iMSCP::Dir->new( dirname => $self->{'mta'}->{'config'}->{'MTA_VIRTUAL_CONF_DIR'} )->remove()->make(
        {
            user  => $self->{'config'}->{'MTA_MAILBOX_UID_NAME'},
            group => $self->{'config'}->{'MTA_MAILBOX_GID_NAME'},
            mode  => 0750
        }
    );

    # Create empty databases
    for ( qw/ virtual_mailbox_domains virtual_mailbox_maps virtual_alias_maps relay_domains transport_maps / ) {
        $self->add( $self->{'mta'}->{'config'}->{'MTA_VIRTUAL_CONF_DIR'} );
    }

    # Add configuration in the main.cf file
    my $dbType = $self->getDbType();
    $self->{'mta'}->postconf(
        virtual_alias_domains   => {
            action => 'replace',
            values => [ '' ]
        },
        virtual_mailbox_domains => {
            action => 'replace',
            values => [ "$dbType:$self->{'mta'}->{'config'}->{'MTA_VIRTUAL_CONF_DIR'}/virtual_mailbox_domains" ]
        },
        virtual_mailbox_maps    => {
            action => 'replace',
            values => [ "$dbType:$self->{'mta'}->{'config'}->{'MTA_VIRTUAL_CONF_DIR'}/virtual_mailbox_maps" ]
        },
        virtual_alias_maps      => {
            action => 'replace',
            values => [ "$dbType:$self->{'mta'}->{'config'}->{'MTA_VIRTUAL_CONF_DIR'}/virtual_alias_maps" ]
        },
        relay_domains           => {
            action => 'replace',
            values => [ "$dbType:$self->{'mta'}->{'config'}->{'MTA_VIRTUAL_CONF_DIR'}/relay_domains" ]
        },
        transport_maps          => {
            action => 'replace',
            values => [ "$dbType:$self->{'mta'}->{'config'}->{'MTA_VIRTUAL_CONF_DIR'}/transport_maps" ]
        },
    );
}

=back

=head1 AUTHOR

 Laurent Declercq <l.declercq@nuxwin.com>

=cut

1;
__END__
