#!/usr/bin/perl

=head1 NAME

 imscp-srv-traff - Collects i-MSCP server traffic data.

=head1 SYNOPSIS

 imscp-srv-traff [OPTION]...

=cut

# i-MSCP - internet Multi Server Control Panel
# Copyright (C) 2010-2018 Laurent Declercq <l.declercq@nuxwin.com>
#
# This library is free software; you can redistribute it and/or
# modify it under the terms of the GNU Lesser General Public
# License as published by the Free Software Foundation; either
# version 2.1 of the License, or (at your option) any later version.
#
# This library is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
# Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public
# License along with this library; if not, write to the Free Software
# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA

use strict;
use warnings;
use FindBin;
use lib "$FindBin::Bin/../PerlLib";
use File::Basename;
use iMSCP::Bootstrapper;
use iMSCP::Database;
use iMSCP::Debug qw/ debug error newDebug /;
use iMSCP::Execute qw/ execute /;
use iMSCP::Getopt;
use iMSCP::Service;
use iMSCP::ProgramFinder;
use POSIX qw/ locale_h /;

setlocale( LC_MESSAGES, "C.UTF-8" );

$ENV{'LANG'} = 'C.UTF-8';

sub run
{
    my @execs = (
        iMSCP::ProgramFinder::find( 'iptables' ),
        ( $::imscpConfig{'IPV6_SUPPORT'} eq 'yes' ? iMSCP::ProgramFinder::find( 'ip6tables' ) : undef )
    );

    my ( $smtpIn, $poIn, $httpIn, $allIn ) = ( 0, 0, 0, 0 );
    my ( $smtpOut, $poOut, $httpOut, $allOut ) = ( 0, 0, 0, 0 );
    my $timestamp = time;
    $timestamp -= ( $timestamp % 1800 ); # Floor down for the last half'n hour

    for my $exec ( @execs ) {
        defined $exec or next;

        # Make sure that at least one of IMSCP_INPUT or IMSCP_OUTPUT chain exists
        my $rs = execute( "$exec -S | grep -P -- '-N\\s+IMSCP_'", \my $stdout, \my $stderr );
        debug( $stdout ) if $stdout;
        $rs < 2 or die( $stderr || 'Unknown error' ) if $rs > 1;

        next unless $stdout;

        my %chains = (
            IMSCP_INPUT  => \my $inputTraffic,
            IMSCP_OUTPUT => \my $outputTraffic
        );

        # Get input and output traffic data
        while ( $stdout =~ /-N\s+(.*)/gm ) {
            $rs = execute( "$exec -t filter -nvxL $1", $chains{$1}, \$stderr );
            debug( ${ $chains{$1} } ) if ${ $chains{$1} };
            !$rs or die( $stderr || 'Unknown error' ) if $rs;
        }

        # Parse input and output traffic data
        _parseTrafficData( \$inputTraffic, \$smtpIn, \$poIn, \$httpIn, \$allIn ) if defined $inputTraffic;
        _parseTrafficData( \$outputTraffic, \$smtpOut, \$poOut, \$httpOut, \$allOut ) if defined $outputTraffic;
    }

    return unless $smtpIn || $poIn || $httpIn || $allIn || $smtpOut || $poOut || $httpOut || $allOut;

    # Update traffic data in database
    iMSCP::Database->getInstance()->do(
        '
            INSERT INTO server_traffic (
                traff_time, bytes_in, bytes_out, bytes_mail_in, bytes_mail_out, bytes_pop_in, bytes_pop_out,
                bytes_web_in, bytes_web_out
            ) VALUES (
                ?, ?, ?, ?, ?, ?, ?, ?, ?
            ) ON DUPLICATE KEY UPDATE
                bytes_in = bytes_in + ?, bytes_out = bytes_out + ?, bytes_mail_in = bytes_mail_in + ?,
                bytes_mail_out = bytes_mail_out + ?, bytes_pop_in = bytes_pop_in + ?, bytes_pop_out = bytes_pop_out + ?,
                bytes_web_in = bytes_web_in + ?, bytes_web_out = bytes_web_out + ?
        ',
        undef,
        $timestamp,
        $allIn, $allOut, $smtpIn, $smtpOut, $poIn, $poOut, $httpIn, $httpOut,
        $allIn, $allOut, $smtpIn, $smtpOut, $poIn, $poOut, $httpIn, $httpOut
    );

    # Reset both input and output i-MSCP chains
    iMSCP::Service->getInstance->restart( 'imscp_traffic' );
}

sub _parseTrafficData
{
    my ( $trafficData, $smtp, $po, $http, $all ) = @_;
    my $frontEndHttpPort = $::imscpConfig{'BASE_SERVER_VHOST_HTTP_PORT'};
    my $frontEndHttpsPort = $::imscpConfig{'BASE_SERVER_VHOST_HTTPS_PORT'};

    while ( ${ $trafficData } =~ /^\s+\d+\s+(\d+).*?(?:(?:dpt|spt):(\d+))?$/gm ) {
        my ( $bytes, $port ) = ( $1, $2 // 0 );
        if ( $port > 0 ) {
            ${ $smtp } += $bytes if $port =~ /^(?:587|25|465)$/;
            ${ $po } += $bytes if $port =~ /^(?:110|995|143|993)$/;
            ${ $http } += $bytes if $port =~ /^(?:80|443|$frontEndHttpPort|$frontEndHttpsPort)$/;
        } else {
            ${ $all } += $bytes;
        }
    }
}

newDebug( 'imscp-srv-traff.log' );

iMSCP::Getopt->parseNoDefault( sprintf( 'Usage: perl %s [OPTION]...', basename( $0 )) . qq{

Collects i-MSCP server traffic data.

OPTIONS:
 -d,    --debug         Enable debug mode.
 -v,    --verbose       Enable verbose mode.},
    'debug|d'   => \&iMSCP::Getopt::debug,
    'verbose|v' => \&iMSCP::Getopt::verbose
);

exit unless iMSCP::Bootstrapper->getInstance()->boot( {
    config_readonly => 1,
    nolock          => 1
} )->lock( "$::imscpConfig{'LOCK_DIR'}/imscp-srv-traff.lock", 'nowait' );

run();

=head1 AUTHOR

 Laurent Declercq <l.declercq@nuxwin.com>

=cut

1;
__END__
