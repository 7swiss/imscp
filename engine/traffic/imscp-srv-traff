#!/usr/bin/perl
# i-MSCP - internet Multi Server Control Panel
# Copyright (C) 2010-2017 by Laurent Declercq <l.declercq@nuxwin.com>
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.

=head1 NAME

imscp-srv-traff - Collects i-MSCP server' traffic data.

=head1 SYNOPSIS

 imscp-srv-traff [options]...

=cut

use strict;
use warnings;
use FindBin;
use lib "$FindBin::Bin/../PerlLib";
use File::Basename;
use iMSCP::Debug;
use iMSCP::Bootstrapper;
use iMSCP::Database;
use iMSCP::Execute;
use iMSCP::Getopt;
use iMSCP::Service;
use iMSCP::ProgramFinder;

my @EXECS;

sub run
{
    my ( $smtpIn, $poIn, $httpIn, $allIn ) = ( 0, 0, 0, 0 );
    my ( $smtpOut, $poOut, $httpOut, $allOut ) = ( 0, 0, 0, 0 );
    my $timestamp = time();
    $timestamp -= ( $timestamp % 1800 ); # Floor down for the last half'n hour

    for my $exec( @EXECS ) {
        defined $exec or next;

        my %chains = (
            'IMSCP_INPUT'  => \ my $inputTraffic,
            'IMSCP_OUTPUT' => \ my $outputTraffic
        );

        # Get input and output traffic data
        while( my ($chain, $target) = each %chains ) {
            my $rs = execute( "$exec -t filter -nvxL $chain", $target, \ my $stderr );
            debug( ${$target} ) if ${$target};
            error( $stderr || 'Unknown error' ) if $rs;
            return $rs if $rs;
        }

        # Parse input and output traffic data
        _parseTrafficData( $inputTraffic, \$smtpIn, \$poIn, \$httpIn, \$allIn );
        _parseTrafficData( $outputTraffic, \$smtpOut, \$poOut, \$httpOut, \$allOut );
    }

    # Update traffic data in database
    my $dbh = iMSCP::Database->factory( )->getRawDb( );
    my $qrs = $dbh->do(
        '
            INSERT INTO server_traffic (
                traff_time, bytes_in, bytes_out, bytes_mail_in, bytes_mail_out, bytes_pop_in, bytes_pop_out,
                bytes_web_in, bytes_web_out
            ) VALUES (
                ?, ?, ?, ?, ?, ?, ?, ?, ?
            ) ON DUPLICATE KEY UPDATE
                bytes_in = bytes_in + ?, bytes_out = bytes_out + ?, bytes_mail_in = bytes_mail_in + ?,
                bytes_mail_out = bytes_mail_out + ?, bytes_pop_in = bytes_pop_in + ?, bytes_pop_out = bytes_pop_out + ?,
                bytes_web_in = bytes_web_in + ?, bytes_web_out = bytes_web_out + ?
        ',
        undef,
        $timestamp,
        $allIn, $allOut, $smtpIn, $smtpOut, $poIn, $poOut, $httpIn, $httpOut,
        $allIn, $allOut, $smtpIn, $smtpOut, $poIn, $poOut, $httpIn, $httpOut
    );
    if( $dbh->err ) {
        error( $dbh->errstr );
        return 1;
    }

    # Reset both input and output i-MSCP chains
    iMSCP::Service->getInstance->restart( 'imscp_traffic' );
}

sub _parseTrafficData
{
    my ( $trafficData, $smtp, $po, $http, $all ) = @_;
    my $frontEndHttpPort = $main::imscpConfig{'BASE_SERVER_VHOST_HTTP_PORT'};
    my $frontEndHttpsPort = $main::imscpConfig{'BASE_SERVER_VHOST_HTTPS_PORT'};

    if($trafficData) {
        while( $trafficData =~ /^\s+\d+\s+(\d+).*?(?:(?:dpt|spt):(\d+))?$/gm ) {
            my ($bytes, $port) = ($1, $2 // 0);
            if($port > 0) {
                ${$smtp} += $bytes if $port =~ /^(?:587|25|465)$/;
                ${$po} += $bytes if $port =~ /^(?:110|995|143|993)$/;
                ${$http} += $bytes if $port =~ /^(?:80|443|$frontEndHttpPort|$frontEndHttpsPort)$/;
            } else {
                ${$all} = $bytes;
            }
        }
    }
}

newDebug('imscp-srv-traff.log');

iMSCP::Getopt->parseNoDefault( sprintf( 'Usage: perl %s [OPTION]...', basename( $0 ) ) . qq {

Script that collects i-MSCP server' traffic data.

OPTIONS:
 -d,    --debug         Enable debug mode.
 -v,    --verbose       Enable verbose mode.},
 'debug|d'              => sub { iMSCP::Getopt->debug(@_) },
 'verbose|v'            => sub { setVerbose(@_); }
);

my $bootstrapper = iMSCP::Bootstrapper->getInstance( );
exit unless $bootstrapper->lock( '/tmp/imscp-srv-traff.lock', 'nowait' );

$bootstrapper->boot(
    {
        config_readonly => 1,
        nolock          => 1
    }
);

@EXECS = (
    iMSCP::ProgramFinder::find( 'iptables' ),
    $main::imscpConfig{'IPV6_SUPPORT'} ? iMSCP::ProgramFinder::find( 'ip6tables' ) : undef
);
my $rs = run();
$bootstrapper->unlock( '/tmp/imscp-srv-traff.lock' );
exit $rs;

=head1 AUTHOR

Laurent Declercq <l.declercq@nuxwin.com>

=cut
