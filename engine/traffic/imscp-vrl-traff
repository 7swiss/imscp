#!/usr/bin/perl

=head1 NAME

 imscp-srv-traff - Collects i-MSCP customers' traffic data (http, ftp, imap/pop3, smtp).

=head1 SYNOPSIS

 imscp-srv-traff [options]...

=cut

# i-MSCP - internet Multi Server Control Panel
# Copyright (C) 2010-2018 by Laurent Declercq <l.declercq@nuxwin.com>
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.

use strict;
use warnings;
use File::Basename;
use FindBin;
use lib "$FindBin::Bin/../PerlLib";
use iMSCP::Bootstrapper;
use iMSCP::Config;
use iMSCP::Database;
use iMSCP::Debug qw/ debug error newDebug /;
use iMSCP::EventManager;
use iMSCP::Getopt;
use iMSCP::Servers;
use POSIX qw / locale_h /;

setlocale( LC_MESSAGES, "C.UTF-8" );

$ENV{'LANG'} = 'C.UTF-8';
$ENV{'PATH'} = '/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin';

sub run
{
    my $rs = iMSCP::EventManager->getInstance()->trigger( 'beforeVrlTraffic' );
    return $rs if $rs;

    my $dbh = iMSCP::Database->getInstance()->getRawDb();

    # Get list of domains for which traffic must be collected
    my $sth = $dbh->prepare(
        "
           SELECT domain_id AS upper_domain_id, domain_name FROM domain WHERE domain_status <> 'todelete'
           UNION ALL
           SELECT domain_id AS upper_domain_id, alias_name FROM domain_aliasses WHERE alias_status <> 'todelete'
           UNION ALL
           SELECT domain_id AS upper_domain_id, CONCAT(subdomain_name, '.', domain_name)
           FROM subdomain
           JOIN domain USING (domain_id)
           WHERE subdomain_status <> 'todelete'
           UNION ALL
           SELECT domain_id AS upper_domain_id, CONCAT(subdomain_alias_name, '.', alias_name)
           FROM subdomain_alias
           JOIN domain_aliasses USING (alias_id)
           WHERE subdomain_alias_status <> 'todelete'
       "
    );
    $sth->execute();
    if ( $dbh->err ) {
        error( sprintf( "Couldn't execute SQL statement: %s", $dbh->errstr ));
        return 1;
    }

    my $domains = $sth->fetchall_hashref( 'domain_name' );
    return 0 unless %{$domains};

    my %domains = map { $_ => 0 } keys %{$domains};
    my $timestamp = time();
    my $halfTimestamp = $timestamp-( $timestamp % 1800 );
    my %trafficDb = (
        'iMSCP::Servers::Httpd' => {},
        'iMSCP::Servers::Ftpd'  => {},
        'iMSCP::Servers::Mta'   => {},
        'iMSCP::Servers::Po'    => {}
    );
    my @servers = grep(/::(?:httpd|ftpd|mta|po)$/, iMSCP::Servers->getInstance()->getListWithFullNames() );

    # Collects traffic data from servers that implement the getTraffic() method
    for ( @servers ) {
        next unless $_->can( 'getTraffic' );
        eval {
            # Initialize intermediate traffic database
            tie %{$trafficDb{$_}}, 'iMSCP::Config', fileName => "$main::imscpConfig{'IMSCP_HOMEDIR'}/$_-vrl-traff.db", nodie => 1;
            %{$trafficDb{$_}} = ( %domains, %{$trafficDb{$_}} );
            $_->factory()->getTraffic( $trafficDb{$_} );
        };
        if ( $@ ) {
            error( $@ );
            $rs = 1;
            last;
        }
    }

    return $rs if $rs;

    # Updates traffic data in i-MSCP database
    $sth = $dbh->prepare(
        '
            INSERT INTO domain_traffic (
                domain_id, dtraff_time, dtraff_web, dtraff_ftp, dtraff_mail, dtraff_pop
            ) VALUES (
                ?, ?, ?, ?, ?, ?
            ) ON DUPLICATE KEY UPDATE
                dtraff_web = dtraff_web + ?, dtraff_ftp = dtraff_ftp + ?, dtraff_mail = dtraff_mail + ?,
                dtraff_pop = dtraff_pop + ?
        '
    );

    while ( my ($domainName, $domainData) = each( %{$domains} ) ) {
        my $newEntriesFound = 0;
        for ( @servers ) {
            $newEntriesFound++ && last if $trafficDb{$_}->{$domainName} > 0;
        }

        # Don't process domain for which there are no traffic data
        next unless $newEntriesFound;

        $sth->execute(
            $domainData->{'upper_domain_id'}, $halfTimestamp, $trafficDb{'iMSCP::Servers::Httpd'}->{$domainName},
            $trafficDb{'iMSCP::Servers::Ftpd'}->{$domainName}, $trafficDb{'iMSCP::Servers::Mta'}->{$domainName},
            $trafficDb{'iMSCP::Servers::Po'}->{$domainName},
            $trafficDb{'iMSCP::Servers::Httpd'}->{$domainName}, $trafficDb{'iMSCP::Servers::Ftpd'}->{$domainName},
            $trafficDb{'iMSCP::Servers::Mta'}->{$domainName}, $trafficDb{'iMSCP::Servers::Po'}->{$domainName}
        );

        if ( $dbh->err ) {
            error( sprintf( "Couldn't execute SQL statement: %s", $dbh->errstr ));
            return 1;
        }

        $trafficDb{$_}->{$domainName} = 0 for @servers;
    }

    return $rs if $rs;

    for ( @servers ) {
        untie( %{$trafficDb{$_}} );
        $rs |= iMSCP::File->new( filename => "$main::imscpConfig{'IMSCP_HOMEDIR'}/$_-vrl-traff.db" )->delFile();
    }

    $rs |= iMSCP::EventManager->getInstance()->trigger( 'afterVrlTraffic' );
}

newDebug( 'imscp-vrl-traff.log' );

iMSCP::Getopt->parseNoDefault( sprintf( 'Usage: perl %s [OPTION]...', basename( $0 )) . qq {

Script that collects i-MSCP customers' traffic data (http, ftp, imap/pop3, smtp).

OPTIONS:
 -d,    --debug         Enable debug mode.
 -v,    --verbose       Enable verbose mode.},
    'debug|d'   => \&iMSCP::Getopt::debug,
    'verbose|v' => \&iMSCP::Getopt::verbose
);

my $bootstrapper = iMSCP::Bootstrapper->getInstance();
exit unless $bootstrapper->lock( '/var/lock/imscp-vrl-traff.lock', 'nowait' );
$bootstrapper->boot(
    {
        config_readonly => 1,
        mode            => 'backend',
        nolock          => 1
    }
);

exit run();

=head1 AUTHOR

 Laurent Declercq <l.declercq@nuxwin.com>

=cut

1;
__END__
