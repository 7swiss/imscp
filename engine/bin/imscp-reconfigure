#!/usr/bin/perl

=head1 NAME

 imscp-reconfigure Reconfigure i-MSCP

=head1 SYNOPSIS

 imscp-reconfigure [OPTION]...

=cut

# i-MSCP - internet Multi Server Control Panel
# Copyright (C) 2010-2019 by Laurent Declercq <l.declercq@nuxwin.com>
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.

use strict;
use warnings;
use File::Basename 'basename';
use FindBin;
use lib "$FindBin::Bin/../PerlLib", "$FindBin::Bin/../PerlVendor";
use iMSCP::Boolean;
use iMSCP::Debug qw/ debugRegisterCallBack error newDebug output setDebug setVerbose /;
use iMSCP::Dialog;
use iMSCP::EventManager;
use iMSCP::Getopt;
use Net::LibIDN 'idn_to_unicode';
use POSIX ();
use Try::Tiny;

try {
    $ENV{'LANG'} = 'C.UTF-8';
    $ENV{'PATH'} = '/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin';
    $ENV{'IMSCP_SETUP'} = TRUE;

    # Sets execution mode
    $::execmode = 'setup' unless defined $::execmode;
    # Init variable that holds questions
    %::questions = () unless %::questions;

    my $basename = basename( $0 );
    newDebug( $basename . '.log' );

    iMSCP::Getopt->parse( sprintf( 'Usage: %s [OPTION]...', $basename ));

    setDebug( iMSCP::Getopt->debug );
    setVerbose( iMSCP::Getopt->noprompt && iMSCP::Getopt->verbose );

    if ( iMSCP::Getopt->preseed ) {
        require iMSCP::Getopt->preseed;
        # The preseed option supersede the reconfigure option
        iMSCP::Getopt->reconfigure( 'none' );
        iMSCP::Getopt->noprompt( TRUE );
    }

    if ( iMSCP::Getopt->noprompt ) {
        debugRegisterCallBack( sub {
            return unless $? == 5;
            
            if ( iMSCP::Getopt->preseed ) {
                print STDERR output( 'Missing or bad entry found in your preseed file.', 'fatal' );
                return;
            }

             print STDERR output( 'Missing or bad entry found in configuration file.', 'fatal' );
        } );
    }

    require 'imscp-setup-methods.pl';

    my $rs = setupBoot();
    $rs ||= iMSCP::EventManager->getInstance()->trigger( 'beforeSetup' );
    $rs ||= setupRegisterListeners();
    return if $rs;

    unless ( iMSCP::Getopt->noprompt ) {
        my $dialog = iMSCP::Dialog->getInstance();
        $dialog->set( 'title', 'i-MSCP Reconfiguration Dialog' );
        $dialog->set( 'yes-label', 'Continue' );
        $dialog->set( 'no-label', 'Abort' );

        return if $dialog->yesno( <<"EOF", TRUE );

Welcome to the \\Z1i-MSCP $::imscpConfig{'Version'}\\Zn reconfiguration dialog.

This program will reconfigures your i-MSCP instance.

You can now either continue or abort.
EOF

        $dialog->resetLabels();
    }

    $rs ||= setupDialog();
    $rs ||= setupTasks();
    $rs ||= iMSCP::EventManager->getInstance()->trigger( 'afterSetup' );
    return if $rs || iMSCP::Getopt->noprompt;

    iMSCP::Dialog->getInstance()->infobox( <<"EOF" );

\\Z1Congratulations\\Zn

i-MSCP has been successfully reconfigured.
EOF
} catch {
    error( $_ );
} finally {
    return unless length getMessageByType( 'error', { amount => 1 } );
    exit 1 if POSIX::isatty( \*STDERR );
    require iMSCP::Mail;
    iMSCP::Mail::sendErrorMessage( join "\n", getMessageByType( 'error', { remove => TRUE } ));
};

=head1 AUTHOR

 Laurent Declercq <l.declercq@nuxwin.com>

=cut

1;
__END__
