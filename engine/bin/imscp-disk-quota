#!/usr/bin/perl

=head1 NAME

 imscp-disk-quota Update quota data for all domain aggregates.

=head1 SYNOPSIS

 imscp-disk-quota [OPTION]...

=cut

# i-MSCP - internet Multi Server Control Panel
# Copyright (C) 2010-2019 by Laurent Declercq <l.declercq@nuxwin.com>
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.

# FIXME: /usr/bin/du command is really time consuming and involve several
# I/O operations. Best would be to implement quota(1). 

use strict;
use warnings;
use File::Basename 'basename';
use FindBin;
use lib "$FindBin::Bin/../PerlLib", "$FindBin::Bin/../PerlVendor";
use iMSCP::Boolean;
use iMSCP::Bootstrapper;
use iMSCP::Database;
use iMSCP::Debug qw/ error getMessageByType newDebug setDebug setVerbose /;
use iMSCP::Execute 'execute';
use iMSCP::Getopt;
use POSIX ();
use Servers::mta;
use Try::Tiny;

=over

=item _getWebDiskSpaceUsage( $dir )

 Get disk space usage for the given Web directory, excluding backups and logs subdirectories

 Param string $dir Web directory
 Return int Disk space usage in bytes, die on failure

=cut

sub _getWebDiskSpaceUsage
{
    my ( $dir ) = @_;

    return 0 unless -d $dir;

    my $stderr;
    execute( [ '/usr/bin/du', "--exclude=$dir/backups", "--exclude=$dir/logs", '-s', '-B1', $dir ], \my $stdout, \$stderr ) == 0 or die(
        $stderr || 'Unknown error'
    );
    my ( $bytes ) = $stdout =~ /^(\d+)/;
    $bytes // 0;
}

=item _getMailDiskSpaceUsage( $dir )

 Get disk space usage for the given mail directory

 Param string $dir Mail directory
 Return int Disk space usage in bytes, die on failure

=cut

sub _getMailDiskSpaceUsage
{
    my ( $dir ) = @_;

    return 0 unless -d $dir;

    my $stderr;
    execute( [ '/usr/bin/du', '-s', '-B1', $dir ], \my $stdout, \$stderr ) == 0 or die( $stderr || 'Unknown error' );
    my ( $bytes ) = $stdout =~ /^(\d+)/;
    $bytes // 0;
}

=item _getSqlDiskSpaceUsage( $dbName )

 Get disk space usage for the given SQL database

 Param string $dbName SQL database name
 Return int Disk space usage in bytes, die on failure

=cut

sub _getSqlDiskSpaceUsage
{
    my ( $dbName ) = @_;

    try {
        my $data = iMSCP::Database->factory()->getConnector()->run( fixup => sub {
            $_->selectall_arrayref( "SHOW TABLE STATUS FROM @{ [ $_->quote_identifier( $dbName ) ] }", { Slice => {} } );
        } );
        my $bytes = 0;
        $bytes += $_->{'Data_length'}+$_->{'Index_length'} for @{ $data };
        $bytes;
    } catch {
        /unknown database/i or die $_;
        0;
    };
}

=item _updateDomainQuotaDataInDatabase( \%data, $webDiskSpaceUsage, $mailDiskSpaceUsage, $sqlDiskSpaceUsage )

 Update quota information in database for the given domain aggregate

 Param hashref \%data Domain aggreate data
 Param int $webDiskSpaceUsage Web disk space usage in bytes
 Param int $mailDiskSpaceUsage Mail disk space usage in bytes
 Param int $sqlDiskSpaceUsage SQL disk space usage in bytes
 Return void, die on failure

=cut

sub _updateDomainQuotaDataInDatabase
{
    my ( $data, $webDiskSpaceUsage, $mailDiskSpaceUsage, $sqlDiskSpaceUsage ) = @_;

    iMSCP::Database->factory()->getConnector()->txn( fixup => sub {
        my $diskSpaceUsage = $webDiskSpaceUsage+$mailDiskSpaceUsage+$sqlDiskSpaceUsage;
        $_->do(
            'UPDATE domain SET domain_disk_usage = ?, domain_disk_file = ?, domain_disk_mail = ?, domain_disk_sql = ? WHERE domain_id = ?',
            undef, $diskSpaceUsage, $webDiskSpaceUsage, $mailDiskSpaceUsage, $sqlDiskSpaceUsage, $data->{'domain_id'}
        );
        $_->do( 'UPDATE quotatallies SET bytes_in_used = ? WHERE name = ?', undef, $diskSpaceUsage, $data->{'domain_name'} );
    } );
}

=item updateDomainQuotaData( \%data )

 Update quotas data for the given domain aggregate

 Param hashref \%data domain aggregate data
 Return void, die on failure
 
=cut

sub updateDomainQuotaData
{
    my ( $data ) = @_;

    # Web disk space usage
    my ( $webDiskSpaceUsage ) = _getWebDiskSpaceUsage( $::imscpConfig{'USER_WEB_DIR'} . '/' . $data->{'domain_name'} );

    # Mail disk space usage
    my $maildirRoot = Servers::mta->factory()->{'config'}->{'MTA_VIRTUAL_MAIL_DIR'};
    my $mailDiskSpaceUsage = _getMailDiskSpaceUsage( $maildirRoot . '/' . $data->{'domain_name'} );
    my $rows = iMSCP::Database->factory()->getConnector()->run( fixup => sub {
        $_->selectcol_arrayref(
            "
                SELECT alias_name AS domain_name FROM domain_aliasses WHERE domain_id = ? AND alias_status <> 'todelete'
                UNION ALL
                SELECT CONCAT(t1.subdomain_name, '.', t2.domain_name) AS domain_name
                FROM subdomain AS t1 JOIN domain AS t2 USING(domain_id) WHERE t1.domain_id = ? AND t1.subdomain_status <> 'todelete'
                UNION ALL
                SELECT CONCAT(t1.subdomain_alias_name, '.',  t2.alias_name) AS domain_name
                FROM subdomain_alias AS t1 JOIN domain_aliasses AS t2 USING(alias_id) WHERE t2.domain_id = ? AND t1.subdomain_alias_status <> 'todelete'
            ",
            undef, $data->{'domain_id'}, $data->{'domain_id'}, $data->{'domain_id'} );
    } );
    $mailDiskSpaceUsage += _getMailDiskSpaceUsage( $maildirRoot . '/' . $_ ) for @{ $rows };

    # SQL disk space usage
    $rows = iMSCP::Database->factory()->getConnector()->run( fixup => sub {
        $_->selectcol_arrayref( 'SELECT sqld_name FROM sql_database WHERE domain_id = ?', undef, $data->{'domain_id'} );
    } );
    my $sqlDiskSpaceUsage = 0;
    $sqlDiskSpaceUsage += _getSqlDiskSpaceUsage( $_ ) for @{ $rows };

    # Update domain quota data in database
    _updateDomainQuotaDataInDatabase( $data, $webDiskSpaceUsage, $mailDiskSpaceUsage, $sqlDiskSpaceUsage );
}

try {
    $ENV{'LANG'} = 'C.UTF-8';
    $ENV{'PATH'} = '/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin';

    my $basename = basename( $0 );
    newDebug( $basename . '.log' );

    iMSCP::Getopt->parseNoDefault( sprintf( 'Usage: %s [OPTION]...', $basename ) . qq{

Update quota data for all domain aggregates.

OPTIONS:
 -d,    --debug         Enable debug mode.
 -v,    --verbose       Enable verbose mode.},
        'debug|d'   => \&iMSCP::Getopt::debug,
        'verbose|v' => \&iMSCP::Getopt::verbose
    );

    setDebug( iMSCP::Getopt->debug );
    setVerbose( iMSCP::Getopt->verbose );

    my $bootstrapper = iMSCP::Bootstrapper->getInstance();
    exit unless $bootstrapper->lock( $basename . '.lock', TRUE );

    $bootstrapper->boot( {
        nolock          => TRUE,
        config_readonly => TRUE
    } );

    my $rows = iMSCP::Database->factory()->getConnector()->run( fixup => sub {
        $_->selectall_arrayref( "SELECT domain_id, domain_name FROM domain WHERE domain_status <> 'todelete'", { Slice => {} } );
    } );
    for my $data ( @{ $rows } ) {
        try {
            updateDomainQuotaData( $data );
        } catch {
            error( sprintf( "Couldn't update quota data for the '%s' domain aggregate: %s", $data->{'domain_name'}, $_ ));
        };
    }
} catch {
    error( $_ );
} finally {
    return unless length getMessageByType( 'error', { amount => 1 } );
    exit 1 if !POSIX::isatty( \*STDERR );
    require iMSCP::Mail;
    iMSCP::Mail::sendErrorMessage( join "\n", getMessageByType( 'error', { remove => TRUE } ));
};

=back

=head1 AUTHOR

 Laurent Declercq <l.declercq@nuxwin.com>

=cut

1;
__END__
