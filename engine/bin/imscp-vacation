#!/usr/bin/perl

=head1 NAME

 imscp-vacation - Send vacation message

=head1 SYNOPSIS

 imscp-vacation

=cut

# i-MSCP - internet Multi Server Control Panel
# Copyright (C) 2010-2019 by Laurent Declercq <l.declercq@nuxwin.com>
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.

use FindBin;
use lib "$FindBin::Bin/../PerlLib", "$FindBin::Bin/../PerlVendor";
use Encode 'encode';
use iMSCP::Boolean;
use iMSCP::Bootstrapper;
use iMSCP::Debug qw/ setDebug setVerbose /;
use Mail::Address;
use MIME::Parser;
use MIME::Entity;
use Try::Tiny;

try {
    $ENV{'LANG'} = 'C.UTF-8';
    $ENV{'PATH'} = '/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin';

    setDebug( FALSE );
    setVerbose( FALSE );

    iMSCP::Bootstrapper->getInstance()->boot( {
        nolock          => TRUE,
        norequirements  => TRUE,
        config_readonly => TRUE
    } );

    my $conn = iMSCP::Database->factory()->getConnector();
    $conn->run( fixup => sub { $_->do( "DELETE FROM `autoreplies_log` WHERE ADDTIME(`time`, '24:00:00') < NOW()" ); } );

    ( my $from = $ARGV[0] ) =~ s/imscp-arpl\.//;
    my $message = do {
        local $/;
        <STDIN>;
    };

    # Setup MIME parser
    my $mimeParser = MIME::Parser->new();
    $mimeParser->output_to_core( FALSE );
    $mimeParser->tmp_to_core( FALSE );

    # Parse MIME message
    my $mimeEntity = $mimeParser->parse_data( $message ) or die( "Couldn't parse MIME message" );
    undef $mimeParser;

    # Retrieve MIME headers
    my $headers = $mimeEntity->head() or die( "Couldn't get MIME headers" );
    undef $mimeEntity;

    # Return early if needed
    return if ( $headers->get( 'x-spam-flag' ) && $headers->get( 'x-spam-flag' ) =~ /yes/i )
        || ( $headers->get( 'x-mailer' ) && $headers->get( 'x-mailer' ) =~ /Auto-Reply/i )
        || ( $headers->get( 'auto-submitted' ) && $headers->get( 'auto-submitted' ) =~ /auto-replied/i )
        || ( $headers->get( 'sender' ) && $headers->get( 'sender' ) =~ /autoresponder/i )
        || $headers->get( 'x-autoresponse-from' );

    # Get recipient address
    my ( $to ) = Mail::Address->parse( $headers->get( 'from' )) or die( "Couldn't parse 'From' MIME header" );
    $to = $to->address();

    # Get original subject
    my $subject = $headers->get( 'subject' );
    undef $headers;

    my ( $val ) = @{ $conn->run( fixup => sub { $_->selectcol_arrayref(
        "SELECT COUNT(`time`) FROM `autoreplies_log` WHERE `from` = ? AND `to` = ? AND ADDTIME(`time`, '24:00:00') > NOW()", undef, $from, $to
    ); } ) };

    return if $val;

    ( $val ) = @{ $conn->run( fixup => sub { $_->selectcol_arrayref(
        'SELECT mail_auto_respond_text FROM mail_users WHERE mail_addr = ? AND mail_auto_respond = 1', undef, $from
    ); } ) };

    return unless $val;

    # Build new multipart MIME message
    $mimeEntity = MIME::Entity->build(
        Type                  => 'multipart/mixed; charset=utf-8',
        From                  => $from,
        To                    => $to,
        Subject               => $subject,
        'X-Autoresponse-From' => $from,
        'X-Mailer'            => "i-MSCP Auto-Reply Mailer"
    );

    # Attach auto-reply message
    $mimeEntity->attach(
        Type        => 'text/plain; charset=utf-8',
        Encoding    => '8bit',
        Description => 'Mail User Auto-Reply Message',
        Data        => encode( 'utf8', $val )
    );

    # Attach original message
    $mimeEntity->attach(
        Type        => 'message/rfc822',
        Description => 'Original Message',
        Data        => $message
    );

    # Send message through sendmail command
    open my $fh, '|-', '/usr/sbin/sendmail -t -oi' or die( sprintf( "Couldn't send auto-reply message: %s", $! ));
    $mimeEntity->print( $fh );
    close $fh;
    undef $mimeEntity;

    $conn->run( fixup => sub { $_->do( 'INSERT INTO `autoreplies_log` (`time`, `from`, `to`) VALUES (NOW(),?,?)', undef, $from, $to ); } );
} catch {
    print STDERR $_;
    exit 1;
};

=head1 AUTHOR

 Laurent Declercq <l.declercq@nuxwin.com>

=cut

1;
__END__
