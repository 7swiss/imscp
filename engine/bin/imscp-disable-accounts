#!/usr/bin/perl

=head1 NAME

 imscp-disable-accounts - Deactivates expired client accounts

=head1 SYNOPSIS

 imscp-disable-accounts [options]...

=cut

# i-MSCP - internet Multi Server Control Panel
# Copyright (C) 2010-2018 by Laurent Declercq <l.declercq@nuxwin.com>
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.

use strict;
use warnings;
use File::Basename;
use FindBin;
use lib "$FindBin::Bin/../PerlLib", "$FindBin::Bin/../PerlVendor";
use iMSCP::Boolean;
use iMSCP::Database;
use iMSCP::Debug qw/ debug error newDebug /;
use iMSCP::Bootstrapper;
use iMSCP::DbTasksProcessor;
use iMSCP::Getopt;
use POSIX qw/ locale_h /;

setlocale( LC_MESSAGES, 'C.UTF-8' );

$ENV{'LANG'} = 'C.UTF-8';

newDebug( 'imscp-disable-accounts.log' );

iMSCP::Getopt->parse( sprintf( 'Usage: perl %s [OPTION]...', basename( $0 )) . qq{

Script that disable expired customer accounts

OPTIONS:
 -v,  --verbose       Enable verbose mode.},
    'verbose|v' => \&iMSCP::Getopt::verbose
);

my $bootstrapper = iMSCP::Bootstrapper->getInstance();
exit unless $bootstrapper->lock( '/var/lock/imscp-disable-accounts.lock', 'nowait' );
$bootstrapper->boot( {
    config_readonly => TRUE,
    mode            => 'backend'
} );

my $rdbh = iMSCP::Database->factory()->getRawDb();
$rdbh->{'RaiseError'} = TRUE;

my $domainIDS = $rdbh->selectcol_arrayref(
    "SELECT domain_id FROM domain WHERE domain_expires <> 0 AND domain_expires < UNIX_TIMESTAMP() AND domain_status NOT IN ('disabled', 'todelete')",
    undef,
    'domain_id'
);

exit unless @{ $domainIDS };

my $mailHardSuspension = !!( $rdbh->selectrow_hashref( "SELECT value FROM config WHERE name = 'HARD_MAIL_SUSPENSION'" )->{'value'} // FALSE );

for my $domainID ( @{ $domainIDS } ) {
    eval {
        $rdbh->begin_work();

        if ( $mailHardSuspension ) {
            $rdbh->do( "UPDATE mail_users SET status = 'todisable', po_active = 'no' WHERE domain_id = ?", undef, $domainID );
        } else {
            $rdbh->do( "UPDATE mail_users SET po_active = 'no' WHERE domain_id = ?", undef, $domainID );
        }

        $rdbh->do( "UPDATE domain SET domain_status = 'todisable' WHERE domain_id = ?", undef, $domainID );
        $rdbh->do( "UPDATE subdomain SET subdomain_status = 'todisable' WHERE domain_id = ?", undef, $domainID );
        $rdbh->do( "UPDATE domain_aliasses SET alias_status = 'todisable' WHERE domain_id = ?", undef, $domainID );
        $rdbh->do(
            "
                UPDATE subdomain_alias
                SET subdomain_alias_status = 'todisable'
                WHERE alias_id IN (SELECT alias_id FROM domain_aliasses WHERE domain_id = ?)
            ",
            undef,
            $domainID
        );
        $rdbh->commit();
    };
    if ( $@ ) {
        $rdbh->rollback();
        error( $@ );
        exit 1;
    }
}

iMSCP::DbTasksProcessor->getInstance( mode => 'backend' )->processDbTasks();

=head1 AUTHOR

 Laurent Declercq <l.declercq@nuxwin.com>

=cut

1;
__END__
