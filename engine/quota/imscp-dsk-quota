#!/usr/bin/perl

=head1 NAME

 imscp-disk-quota Calculate quota for customers data (mail, Web and sql data)

=head1 SYNOPSIS

 imscp-dsk-quota [options]...

=cut

# i-MSCP - internet Multi Server Control Panel
# Copyright (C) 2010-2018 Laurent Declercq <l.declercq@nuxwin.com>
#
# This library is free software; you can redistribute it and/or
# modify it under the terms of the GNU Lesser General Public
# License as published by the Free Software Foundation; either
# version 2.1 of the License, or (at your option) any later version.
#
# This library is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
# Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public
# License along with this library; if not, write to the Free Software
# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA

use strict;
use warnings;
use File::Basename;
use FindBin;
use lib "$FindBin::Bin/../PerlLib";
use iMSCP::Bootstrapper;
use iMSCP::Debug qw/ debug error newDebug /;
use iMSCP::Execute qw/ execute /;
use iMSCP::Getopt;
use iMSCP::Mail;
use iMSCP::Servers::Mta;
use POSIX qw/ locale_h /;

setlocale( LC_MESSAGES, "C.UTF-8" );

$ENV{'LANG'} = 'C.UTF-8';

=head1 DESCRIPTION

 Calculate quota for customers data (mail, Web and sql data).

=head1 PUBLIC METHODS

=over 4

=item quotaFiles( )

 Calculate quota for customer's mail and Web data

 Return void

=cut

sub quotaFiles
{
    eval {
        my $dbh = iMSCP::Database->getInstance();
        my $rows = $dbh->selectall_hashref(
            "SELECT domain_id, domain_name FROM domain WHERE domain_status NOT IN ('disabled', 'todelete')", 'domain_id'
        );

        my $virtualMailDir = iMSCP::Servers::Mta->factory()->{'config'}->{'MTA_VIRTUAL_MAIL_DIR'};

        while ( my ( $dmnId, $dmnData ) = each( %{ $rows } ) ) {
            my $totalDiskUsage = my $webDiskUsage = my $mailDiskUsage = 0;
            my @items = (
                { webdir => "$::imscpConfig{'USER_WEB_DIR'}/$dmnData->{'domain_name'}" },
                { maildir => "$virtualMailDir/$dmnData->{'domain_name'}" }
            );

            # Get list of all child domains (sub|als|alssub)
            my $rows2 = eval {
                $dbh->selectall_hashref(
                    "
                        SELECT alias_name AS domain_name
                        FROM domain_aliasses
                        WHERE domain_id = ?
                        AND alias_status <> 'todelete'
                        UNION ALL
                        SELECT CONCAT(subdomain_name, '.', domain_name) AS domain_name
                        FROM subdomain
                        JOIN domain USING(domain_id)
                        WHERE domain_id = ?
                        AND subdomain_status <> 'todelete'
                        UNION ALL
                        SELECT CONCAT(subdomain_alias_name, '.',  alias_name) AS domain_name
                        FROM subdomain_alias
                        JOIN domain_aliasses USING(alias_id)
                        WHERE domain_id = ?
                        AND subdomain_alias_status <> 'todelete'
                    ",
                    'domain_name', undef, $dmnId, $dmnId, $dmnId
                );
            };
            if ( $@ ) {
                error( $@ );
            } elsif ( %{ $rows2 } ) {
                push @items, { maildir => "$virtualMailDir/$_" } for keys %{ $rows2 };
            }

            for my $item ( @items ) {
                my ( $dirType, $dir ) = %{ $item };
                next unless -d $dir;

                if ( $dirType eq 'webdir' ) {
                    my $rs = execute(
                        [ 'nice', '-n', '19', 'ionice', '-c2', '-n7', 'du', '--exclude=backups/*', '--exclude=logs/*', '-s', '-B1', $dir ],
                        \my $stdout,
                        \my $stderr
                    );
                    error( $stderr || 'Unknown error' ) if $rs;
                    $webDiskUsage = $1 if length $stdout && $stdout =~ /^(\d+)/;
                } else {
                    my $rs = execute( [ 'nice', '-n', '19', 'ionice', '-c2', '-n7', 'du', '-s', '-B1', $dir ], \my $stdout, \my $stderr );
                    error( $stderr || 'Unknown error' ) if $rs;
                    $mailDiskUsage += $1 if length $stdout && $stdout =~ /^(\d+)/;
                }
            }

            $totalDiskUsage = $webDiskUsage+$mailDiskUsage;

            eval {
                $dbh->begin_work();
                $dbh->do(
                    'UPDATE domain SET domain_disk_usage = ?, domain_disk_file = ?, domain_disk_mail = ? WHERE domain_id = ?',
                    undef, $totalDiskUsage, $webDiskUsage, $mailDiskUsage, $dmnId
                );
                $dbh->do( 'UPDATE quotatallies SET bytes_in_used = ? WHERE name = ?', undef, $totalDiskUsage, $dmnData->{'domain_name'} );
                $dbh->commit();
            };
            if ( $@ ) {
                $dbh->rollback();
                error( $@ );
            }
        }
    };
    error( $@ ) if $@;
}

=item quotaSql( )

 Calculate quota for customer's SQL data

 Return void

=cut

sub quotaSql
{
    eval {
        my $dbh = iMSCP::Database->getInstance();
        my $rows = $dbh->selectall_hashref(
            "SELECT domain_id, domain_name, domain_disk_usage FROM domain WHERE domain_status NOT IN ('disabled', 'todelete')", 'domain_id'
        );

        return unless %{ $rows };

        my $databases = $dbh->selectcol_arrayref( 'SHOW DATABASES' );

        while ( my ( $dmnId, $dmnData ) = each( %{ $rows } ) ) {
            my ( $size, $sqlSize ) = ( 0, 0 );
            my $customerDatabases = $dbh->selectall_hashref( 'SELECT sqld_name FROM sql_database WHERE domain_id = ?', 'sqld_name', undef, $dmnId );

            for my $sqlDbName ( keys %{ $customerDatabases } ) {
                next unless grep ($_ eq $sqlDbName, @{ $databases });
                my $sqlDbTables = $dbh->selectall_hashref( "SHOW TABLE STATUS FROM " . $dbh->quote_identifier( $sqlDbName ), 1 );
                next unless %{ $sqlDbTables };
                $size += $_->{'Data_length'}+$_->{'Index_length'} for values %{ $sqlDbTables };
            }

            $sqlSize += $size;
            $size += $dmnData->{'domain_disk_usage'};

            eval {
                $dbh->begin_work();
                $dbh->do( 'UPDATE domain SET domain_disk_usage = ?, domain_disk_sql = ? WHERE domain_id = ?', undef, $size, $sqlSize, $dmnId );
                $dbh->do( 'UPDATE quotatallies SET bytes_in_used = ? WHERE name = ?', undef, $size, $dmnData->{'domain_name'} );
                $dbh->commit();
            };
            if ( $@ ) {
                $dbh->rollback();
                error( $@ );
            }
        }
    };
    error( $@ ) if $@;
}

newDebug( 'imscp-dsk-quota.log' );

iMSCP::Getopt->parseNoDefault( sprintf( 'Usage: perl %s [OPTION]...', basename( $0 )) . qq{

Calculate quota for customers data (mail, Web and sql data).

OPTIONS:
 -d,    --debug         Enable debug mode.
 -v,    --verbose       Enable verbose mode.},
    'debug|d'   => \&iMSCP::Getopt::debug,
    'verbose|v' => \&iMSCP::Getopt::verbose
);

exit unless iMSCP::Bootstrapper->getInstance()->boot( {
    config_readonly => 1,
    nolock          => 1
} )->lock( "$::imscpConfig{'LOCK_DIR'}/imscp-dsk-quota.lock", 'nowait' );

quotaFiles();
quotaSql();

=back

=head1 AUTHOR

 Laurent Declercq <l.declercq@nuxwin.com>

=cut

1;
__END__
