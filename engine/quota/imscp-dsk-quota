#!/usr/bin/perl

=head1 NAME

 imscp-dsk-quota Computes customer's quota.

=head1 SYNOPSIS

 imscp-dsk-quota [options]...

=cut

# i-MSCP - internet Multi Server Control Panel
# Copyright (C) 2010-2017 by Laurent Declercq <l.declercq@nuxwin.com>
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.

use strict;
use warnings;
use File::Basename;
use FindBin;
use lib "$FindBin::Bin/../PerlLib", "$FindBin::Bin/../PerlVendor";
use iMSCP::Bootstrapper;
use iMSCP::Debug qw/ debug error getMessageByType newDebug setVerbose /;
use iMSCP::Execute qw / execute /;
use iMSCP::Getopt;
use iMSCP::Mail;
use Servers::mta;

=head1 DESCRIPTION

 Computes customer's quota.

=head1 PUBLIC METHODS

=over 4

=item quotaFiles( )

 Computes customer's mail and web quota

 Return void

=cut

sub quotaFiles
{
    my $db = iMSCP::Database->factory( );

    my $data = $db->doQuery(
        'domain_id',
        "SELECT domain_id, domain_name FROM domain WHERE domain_status NOT IN ('disabled', 'todelete')"
    );
    unless (ref $data eq 'HASH') {
        error( $data );
        return 1;
    }

    my $virtualMailDir = Servers::mta->factory( )->{'config'}->{'MTA_VIRTUAL_MAIL_DIR'};

    while(my ($domainId, $domainData) = each( %{$data} )) {
        my $totalDiskUsage = my $webDiskUsage = my $mailDiskUsage = 0;
        my @items = (
            { webdir => "$main::imscpConfig{'USER_WEB_DIR'}/$domainData->{'domain_name'}" },
            { maildir => "$virtualMailDir/$domainData->{'domain_name'}" }
        );

        # Get list of all child domains (sub|als|alssub)
        my $childDomains = $db->doQuery(
            'domain_name',
            "
                SELECT alias_name AS domain_name
                FROM domain_aliasses
                WHERE domain_id = ?
                AND alias_status <> 'todelete'

                UNION ALL

                SELECT CONCAT(subdomain_name, '.', domain_name) AS domain_name
                FROM subdomain
                INNER JOIN domain USING(domain_id)
                WHERE domain_id = ?
                AND subdomain_status <> 'todelete'

                UNION ALL

                SELECT CONCAT(subdomain_alias_name, '.',  alias_name) AS domain_name
                FROM subdomain_alias
                INNER JOIN domain_aliasses USING(alias_id)
                WHERE domain_id = ?
                AND subdomain_alias_status <> 'todelete'
            ",
            $domainId,
            $domainId,
            $domainId
        );
        unless (ref $childDomains eq 'HASH') {
            error( $childDomains );
        } elsif (%{$childDomains}) {
            push @items, { maildir => "$virtualMailDir/$_" } for keys %{$childDomains};
        }

        for(@items) {
            my ($dirType, $dir) = %{$_};
            next unless -d $dir;

            if ($dirType eq 'webdir') {
                my $rs = execute(
                    [ 'du', '--exclude=backups/*', '--exclude=logs/*', '-s', '-B1', $dir ], \ my $stdout, \ my $stderr
                );
                error( $stderr || 'Unknown error' ) if $rs;
                $webDiskUsage = $1 if $stdout && $stdout =~ /^(\d+)/;
            } else {
                my $rs = execute( [ 'du', '-s', '-B1', $dir ], \ my $stdout, \ my $stderr );
                error( $stderr || 'Unknown error' ) if $rs;
                $mailDiskUsage += $1 if $stdout && $stdout =~ /^(\d+)/;
            }
        }

        $totalDiskUsage = $webDiskUsage+$mailDiskUsage;

        my $dbi = $db->startTransaction( );

        local $@;
        eval {
            $dbi->do(
                '
                    UPDATE domain
                    SET domain_disk_usage = ?, domain_disk_file = ?, domain_disk_mail = ?
                    WHERE domain_id = ?
                ',
                undef,
                $totalDiskUsage,
                $webDiskUsage,
                $mailDiskUsage,
                $domainId
            );

            $dbi->do(
                'UPDATE quotatallies SET bytes_in_used = ? WHERE name = ?',
                undef,
                $totalDiskUsage,
                $domainData->{'domain_name'}
            );
            
            $dbi->commit( );
        };
        if ($@) {
            error( $@ );
            $dbi->rollback( );
        }

        $db->endTransaction( );
    }
}

=item quotaSql( )

 Computes customer's SQL quota

 Return void

=cut

sub quotaSql
{
    my $db = iMSCP::Database->factory( );

    my $databases = $db->doQuery( 'Database', 'SHOW DATABASES' );
    unless (ref $databases eq 'HASH') {
        error( $databases );
        return 1;
    }

    my $data = $db->doQuery(
        'domain_id',
        "
            SELECT domain_id, domain_name, domain_disk_usage
            FROM domain
            WHERE domain_status NOT IN ('disabled', 'todelete')
        "
    );
    unless (ref $data eq 'HASH') {
        error( $data );
        return 1;
    }

    return 0 unless %{$data};

    while(my ($domainId, $domainData) = each( %{$data} )) {
        my $size = my $sqlSize = 0;

        my $customerDatabases = $db->doQuery(
            'sqld_name', 'SELECT sqld_name FROM sql_database WHERE domain_id = ?', $domainId
        );
        unless (ref $customerDatabases eq 'HASH') {
            error( $customerDatabases );
            next;
        }

        for my $sqlDbName (keys %{$customerDatabases}) {
            next unless grep($_ eq $sqlDbName, keys %{$databases});

            my $quotedDbName = $db->quoteIdentifier( $sqlDbName );
            my $sqlDbTables = $db->doQuery('1', "SHOW TABLE STATUS FROM $quotedDbName");
            unless (ref $sqlDbTables eq 'HASH') {
                error( $sqlDbTables );
                next;
            }

            next unless %{$sqlDbTables};

            for my $sqlDbTable(keys %{$sqlDbTables}) {
                $size += (($sqlDbTables->{$sqlDbTable}->{'Data_length'})
                    ? $sqlDbTables->{$sqlDbTable}->{'Data_length'} : 0
                )+(($sqlDbTables->{$sqlDbTable}->{'Index_length'})
                    ? $sqlDbTables->{$sqlDbTable}->{'Index_length'} : 0);
            }
        }

        $sqlSize += $size;
        $size += $domainData->{'domain_disk_usage'};

        my $dbi = $db->startTransaction( );

        local $@;
        eval {
            $dbi->do(
                'UPDATE domain SET domain_disk_usage = ?, domain_disk_sql = ? WHERE domain_id = ?',
                undef,
                $size,
                $sqlSize,
                $domainId
            );

            $dbi->do(
                'UPDATE quotatallies SET bytes_in_used = ? WHERE name = ?',
                undef,
                $size,
                $domainData->{'domain_name'}
            );
            $dbi->commit( );
        };
        if ($@) {
            error( $@ );
            $dbi->rollback( );
        }

        $db->endTransaction( );
    }
}

newDebug( 'imscp-dsk-quota.log' );

iMSCP::Getopt->parseNoDefault( sprintf( 'Usage: perl %s [OPTION]...', basename( $0 ) ).qq {

Script which computes customer's quota.

OPTIONS:
 -d,    --debug         Enable debug mode.
 -v,    --verbose       Enable verbose mode.},
    'debug|d'   => \&iMSCP::Getopt::debug,
    'verbose|v' => \&iMSCP::Getopt::verbose
);

setVerbose( iMSCP::Getopt->verbose );

my $bootstrapper = iMSCP::Bootstrapper->getInstance( );
exit unless $bootstrapper->lock( '/var/lock/imscp-dsk-quota.lock', 'nowait' );

$bootstrapper->boot(
    {
        mode            => 'backend',
        norequirements  => 1,
        nolock          => 1,
        config_readonly => 1
    }
);

quotaFiles( );
quotaSql( );

my @errors = getMessageByType( 'error' );
iMSCP::Mail->new()->errmsg( "@errors" ) if @errors;

END { $bootstrapper->unlock( '/var/lock/imscp-dsk-quota.lock' ); }

=back

=head1 AUTHOR

 Laurent Declercq <l.declercq@nuxwin.com>

=cut

1;
__END__
