#!/usr/bin/perl

=head1 NAME

 imscp-srv-traff - Collects customer traffic data.

=head1 SYNOPSIS

 imscp-srv-traff [OPTION]...

=cut

# i-MSCP - internet Multi Server Control Panel
# Copyright (C) 2010-2018 Laurent Declercq <l.declercq@nuxwin.com>
#
# This library is free software; you can redistribute it and/or
# modify it under the terms of the GNU Lesser General Public
# License as published by the Free Software Foundation; either
# version 2.1 of the License, or (at your option) any later version.
#
# This library is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
# Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public
# License along with this library; if not, write to the Free Software
# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA

use strict;
use warnings;
use File::Basename;
use FindBin;
use lib "$FindBin::Bin/../PerlLib";
use iMSCP::Boolean;
use iMSCP::Bootstrapper;
use iMSCP::Config;
use iMSCP::Database;
use iMSCP::Debug qw/ debug newDebug /;
use iMSCP::Getopt;
use iMSCP::Servers;
use POSIX qw/ locale_h /;

setlocale( LC_MESSAGES, "C.UTF-8" );

$ENV{'LANG'} = 'C.UTF-8';

sub run
{
    my $dbh = iMSCP::Database->getInstance();

    # Get list of domains for which traffic must be collected
    my $sth = $dbh->prepare(
        "
           SELECT domain_id AS upper_domain_id, domain_name FROM domain WHERE domain_status <> 'todelete'
           UNION ALL
           SELECT domain_id AS upper_domain_id, alias_name FROM domain_aliases WHERE alias_status <> 'todelete'
           UNION ALL
           SELECT domain_id AS upper_domain_id, CONCAT(subdomain_name, '.', domain_name)
           FROM subdomain
           JOIN domain USING (domain_id)
           WHERE subdomain_status <> 'todelete'
           UNION ALL
           SELECT domain_id AS upper_domain_id, CONCAT(subdomain_alias_name, '.', alias_name)
           FROM subdomain_alias
           JOIN domain_aliases USING (alias_id)
           WHERE subdomain_alias_status <> 'todelete'
       "
    );
    $sth->execute();

    my $domains = $sth->fetchall_hashref( 'domain_name' );
    return unless %{ $domains };

    my %domains = map { $_ => 0 } keys %{ $domains };
    my $timestamp = time();
    my $halfTimestamp = $timestamp-( $timestamp % 1800 );
    my %trafficDb = map { $_ => {} } grep (/::(?:httpd|ftpd|mta|po)$/i, iMSCP::Servers->getInstance()->getList() );

    # Collects traffic data from servers that implement the getTraffic() method
    for my $server ( keys %trafficDb ) {
        # Initialize intermediate traffic database
        tie %{ $trafficDb{$server} }, 'iMSCP::Config', filename => "$::imscpConfig{'IMSCP_HOMEDIR'}/$server-vrl-traff.db", nocroak => TRUE;
        %{ $trafficDb{$server} } = ( %domains, %{ $trafficDb{$server} } );

        # Collect traffic
        $server->factory()->getTraffic( $trafficDb{$server} );
    }

    # Updates traffic data in i-MSCP database
    $sth = $dbh->prepare(
        '
            INSERT INTO domain_traffic (
                domain_id, dtraff_time, dtraff_web, dtraff_ftp, dtraff_mail, dtraff_pop
            ) VALUES (
                ?, ?, ?, ?, ?, ?
            ) ON DUPLICATE KEY UPDATE
                dtraff_web = dtraff_web + ?, dtraff_ftp = dtraff_ftp + ?, dtraff_mail = dtraff_mail + ?,
                dtraff_pop = dtraff_pop + ?
        '
    );

    while ( my ( $domainName, $domainData ) = each( %{ $domains } ) ) {
        my $newEntriesFound = 0;
        for my $server ( keys %trafficDb ) {
            $newEntriesFound++ && last if $trafficDb{$server}->{$domainName} > 0;
        }

        # Don't process domain for which there are no traffic data
        next unless $newEntriesFound;

        $sth->execute(
            $domainData->{'upper_domain_id'}, $halfTimestamp, $trafficDb{'iMSCP::Servers::Httpd'}->{$domainName},
            $trafficDb{'iMSCP::Servers::Ftpd'}->{$domainName}, $trafficDb{'iMSCP::Servers::Mta'}->{$domainName},
            $trafficDb{'iMSCP::Servers::Po'}->{$domainName},
            $trafficDb{'iMSCP::Servers::Httpd'}->{$domainName}, $trafficDb{'iMSCP::Servers::Ftpd'}->{$domainName},
            $trafficDb{'iMSCP::Servers::Mta'}->{$domainName}, $trafficDb{'iMSCP::Servers::Po'}->{$domainName}
        );

        for my $server ( keys %trafficDb ) {
            $trafficDb{$server}->{$domainName} = 0;
        }
    }

    for my $server ( keys %trafficDb ) {
        untie( %{ $trafficDb{$server} } );
        eval { iMSCP::File->new( filename => "$::imscpConfig{'IMSCP_HOMEDIR'}/$server-vrl-traff.db" )->remove() };
    }
}

newDebug( 'imscp-vrl-traff.log' );

iMSCP::Getopt->parseNoDefault( sprintf( 'Usage: perl %s [OPTION]...', basename( $0 )) . qq{

Collects customers traffic data.

OPTIONS:
 -d,    --debug         Enable debug mode.
 -v,    --verbose       Enable verbose mode.},
    'debug|d'   => \&iMSCP::Getopt::debug,
    'verbose|v' => \&iMSCP::Getopt::verbose
);

exit unless iMSCP::Bootstrapper->getInstance()->boot( {
    config_readonly => TRUE,
    nolock          => TRUE
} )->lock( "$::imscpConfig{'LOCK_DIR'}/imscp-vrl-traff.lock", 'nowait' );

run();

=head1 AUTHOR

 Laurent Declercq <l.declercq@nuxwin.com>

=cut

1;
__END__
