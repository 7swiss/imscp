#!/usr/bin/perl

# i-MSCP - internet Multi Server Control Panel
# Copyright (C) 2010-2018 Laurent Declercq <l.declercq@nuxwin.com>
#
# This library is free software; you can redistribute it and/or
# modify it under the terms of the GNU Lesser General Public
# License as published by the Free Software Foundation; either
# version 2.1 of the License, or (at your option) any later version.
#
# This library is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
# Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public
# License along with this library; if not, write to the Free Software
# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA

=head1 NAME

 imscp-uninstall Uninstall i-MSCP

=head1 SYNOPSIS

 imscp-uninstall [options]...

=cut

# TODO: This script should be idempotent.

use strict;
use warnings;
use FindBin;
use lib "$FindBin::Bin/../PerlLib";
use File::Basename;
use iMSCP::Boolean;
use iMSCP::Bootstrapper;
use iMSCP::Database;
use iMSCP::DbTasksProcessor;
use iMSCP::Debug qw/ debug newDebug /;
use iMSCP::Dialog;
use iMSCP::Dir;
use iMSCP::File;
use iMSCP::Getopt;
use iMSCP::Packages;
use iMSCP::Servers;
use iMSCP::Service;
use iMSCP::Stepper qw/ endDetail startDetail step /;
use iMSCP::SystemUser;
use iMSCP::Servers::Sqld;
use POSIX qw/ locale_h /;

setlocale( LC_MESSAGES, "C.UTF-8" );

$ENV{'LANG'} = 'C.UTF-8';

# Set execution context
iMSCP::Getopt->context( 'uninstaller' );

newDebug( 'imscp-uninstall.log' );

sub startUp
{
    iMSCP::Getopt->debug( TRUE ); # Force debug mode (logs)
    iMSCP::Bootstrapper->getInstance()->boot();
}

sub process
{
    _userDialog();

    iMSCP::Database->getInstance()->selectrow_hashref( "SELECT 1 FROM plugin WHERE plugin_status <> 'uninstalled'" );

    if ( $row ) {
        iMSCP::Dialog->getInstance()->infobox( <<'EOF' );
\Z1Uninstallation aborted.\Zn

You must first uninstall all i-MSCP plugins through the control panel interface.
EOF
        exit;
    }

    undef $row;

    my @steps = (
        [ \&_removeCustomers, 'Removing i-MSCP customers' ],
        [ \&_uninstallPackages, 'Uninstalling i-MSCP packages' ],
        [ \&_uninstallServers, 'Uninstalling i-MSCP servers' ],
        [ \&_uninstallServices, 'Uninstalling i-MSCP services' ],
        [ \&_removeSqlData, 'Removing i-MSCP SQL data' ],
        [ \&_removeiMSCPSystemUser, 'Removing i-MSCP system user' ],
        [ \&_removeFiles, 'Removing i-MSCP files' ],
    );

    my ( $nStep, $nbSteps ) = ( 1, scalar @steps );
    for my $step ( @steps ) {
        step( @{ $step }, $nbSteps, $nStep++ );
    }

    iMSCP::Dialog->getInstance()->endGauge();
}

sub shutDown
{
    iMSCP::Dialog->getInstance()->infobox( <<'EOF' );

\Z1Congratulations\Zn

iMSCP has been successfully uninstalled.

You can find uninstallation logs at /var/log/imscp/imscp-uninstall.log
EOF
}

sub _userDialog
{
    my $dialog = iMSCP::Dialog->getInstance();
    $dialog->set( 'title', 'i-MSCP Uninstaller Dialog' );

    exit if $dialog->yesno( <<"EOF", TRUE );

Welcome to the \\Z4i-MSCP $::imscpConfig{'Version'}\\Zn uninstaller dialog.

This program will uninstall i-MSCP from your server.

\\Z1WARNING:\\Zn All i-MSCP data will be removed.

Do you want to continue?
EOF
}

sub _removeCustomers
{
    my $tables = {
        admin           => [ 'admin_status', "WHERE admin_type = 'user'" ],
        domain          => 'domain_status',
        domain_aliasses => 'alias_status',
        subdomain       => 'subdomain_status',
        subdomain_alias => 'subdomain_alias_status',
        mail_users      => 'status',
        htaccess        => 'status',
        htaccess_groups => 'status',
        htaccess_users  => 'status',
        ssl_certs       => 'status'
    };
    my $aditionalCondition;

    my $db = iMSCP::Database->getInstance();
    my $oldDbName = $db->useDatabase( $::imscpConfig{'DATABASE_NAME'} );

    while ( my ( $table, $field ) = each %{ $tables } ) {
        if ( ref $field eq 'ARRAY' ) {
            $aditionalCondition = $field->[1];
            $field = $field->[0];
        } else {
            $aditionalCondition = ''
        }

        ( $table, $field ) = ( $db->quote_identifier( $table ), $db->quote_identifier( $field ) );
        $db->do( "UPDATE $table SET $field = 'todelete' $aditionalCondition" );
    }

    $db->useDatabase( $oldDbName ) if length $oldDbName;

    startDetail();
    iMSCP::DbTasksProcessor->getInstance()->processDbTasks();
    endDetail();
}

sub _uninstallPackages
{
    startDetail();

    # For uninstallation, we reverse package priorities
    my @packages = reverse iMSCP::Packages->getInstance()->getListWithFullNames();
    my ( $step, $nbSteps ) = ( 1, scalar @packages );
    for my $package ( @packages ) {
        ( my $subref = $package->can( 'uninstall' ) ) or $step++ && next;
        step( sub { $subref->( $package->getInstance()) }, sprintf( 'Executing %s uninstall tasks...', $package ), $nbSteps, $step );
    }

    endDetail();
}

sub _uninstallServers
{
    # For uninstallation, we reverse servers priorities
    my @servers = iMSCP::Servers->getInstance()->getListWithFullNames();
    my ( $step, $nbSteps ) = ( 1, scalar @servers );

    startDetail();
    for my $task ( qw/ preuninstall uninstall postuninstall / ) {
        for my $server ( @servers ) {
            step( sub { $server->factory()->$task() }, sprintf( 'Executing %s uninstall tasks...', $server ), $nbSteps, $step++ );
        }
    }
    endDetail();
}

sub _uninstallServices
{
    # FIXME: Should be done by specific setup packages, eg:
    # iMSCP::Packages::Setup::Traffic
    # iMSCP::Package::Setup::Mounts
    my $srvProvider = iMSCP::Service->getInstance();
    $srvProvider->remove( $_ ) for 'imscp_traffic', 'imscp_mountall';

    # FIXME: Should be done by the Bind9 server implementation...
    for my $service ( 'bind9', 'bind9-resolvconf' ) {
        $srvProvider->disable( $service ) if $srvProvider->isSystemd();

        iMSCP::File->new( filename => "/etc/systemd/system/$service.service" )->remove();

        if ( -f "/lib/systemd/system/$service.service" ) {
            $srvProvider->enable( $service ) if $srvProvider->isSystemd();
        }
    }
}

# FIXME: Should be done by the Sqld server implementation
sub _removeSqlData
{
    my $sqlServer = iMSCP::Servers::Sqld->factory();
    my $dbh = iMSCP::Database->getInstance();

    # Remove customer's sql users
    my $rows = $dbh->selectall_hashref( 'SELECT DISTINCT sqlu_name, sqlu_host FROM sql_user', 'sqlu_name' );
    $sqlServer->dropUser( $rows->{$_}->{'sqlu_name'}, $rows->{$_}->{'sqlu_host'} ) for keys %{ $rows };

    # Remove customer's sql databases
    $rows = $dbh->selectall_hashref( 'SELECT sqld_name FROM sql_database', 'sqld_name' );
    $dbh->do( 'DROP DATABASE IF EXISTS ' . $dbh->quote_identifier( $rows->{$_}->{'sqld_name'} )) for keys %{ $rows };

    # Remove i-MSCP sql database
    $dbh->do( 'DROP DATABASE IF EXISTS ' . $dbh->quote_identifier( $::imscpConfig{'DATABASE_NAME'} ));

    # Drop i-MSCP master SQL user
    $sqlServer->dropUser( $::imscpConfig{'DATABASE_USER'}, $::imscpConfig{'DATABASE_USER_HOST'} );
}

# FIXME: Should be done by the Local server implementation
sub _removeiMSCPSystemUser
{
    iMSCP::SystemUser->new( force => 1 )->delSystemUser( $::imscpConfig{'IMSCP_USER'} );
}

# FIXME: Should be done by the Local server implementation
sub _removeFiles
{
    chdir( '/' );

    for my $file ( '/usr/local/sbin/imscp-dpkg-post-invoke.pl', '/etc/apt/apt.conf.d/90imscp' ) {
        iMSCP::File->new( filename => $file )->remove();
    }

    for my $dir ( $::imscpConfig{'CONF_DIR'}, $::imscpConfig{'USER_WEB_DIR'}, $::imscpConfig{'LOG_DIR'}, $::imscpConfig{'ROOT_DIR'} ) {
        iMSCP::Dir->new( dirname => $dir )->remove();
    }
}

startUp();
process();
shutDown();

=head1 AUTHOR

 i-MSCP Team <team@i-mscp.net>

=cut

1;
__END__
